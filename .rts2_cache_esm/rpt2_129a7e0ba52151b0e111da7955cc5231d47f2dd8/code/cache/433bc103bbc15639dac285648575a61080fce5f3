{"code":"import Painter from '../painter';\r\nimport Sprite from './sprite';\r\nimport frag from './sprites.frag';\r\nimport vert from './sprites.vert';\r\n// Allocations will be done by pieces of BLOCK Sprites.\r\nconst BLOCK = 64;\r\nconst NB_ATTRIBS = 6; // attXYZ and attUV and attAngle.\r\nconst NB_CORNERS = 4;\r\nconst CHUNK = NB_ATTRIBS * NB_CORNERS;\r\nexport default class SpritesPainter extends Painter {\r\n    constructor(params) {\r\n        super();\r\n        this.capacity = BLOCK;\r\n        this.count = 0;\r\n        this.dataVert = new Float32Array(BLOCK * CHUNK);\r\n        this.deferedSpriteCreations = [];\r\n        this.sprites = [];\r\n        /**\r\n         * Since the vertex array can be reallocated, we cannot give a reference to the\r\n         * Float32Array to any Sprite. Instead, we will give them this function that will\r\n         * return the current array.\r\n         */\r\n        this.getData = () => this.dataVert;\r\n        this.params = params;\r\n    }\r\n    get atlas() {\r\n        return this.params.atlas;\r\n    }\r\n    createSprite(params) {\r\n        if (!this.scene) {\r\n            // The sprite creation will be performed once this painter is initialized.\r\n            this.deferedSpriteCreations.push(params);\r\n        }\r\n        if (!this.atlas) {\r\n            throw Error('Unable to create a Sprite because no Atlas has been provided!');\r\n        }\r\n        const index = this.count * CHUNK;\r\n        this.count += 1;\r\n        if (this.count >= this.capacity) {\r\n            // Allocate a new block.\r\n            this.allocateNewBlock();\r\n        }\r\n        const { width, height } = this.atlas;\r\n        const sprite = new Sprite(index, this.getData, {\r\n            width,\r\n            height,\r\n            ...params,\r\n        });\r\n        this.sprites.push(sprite);\r\n        return sprite;\r\n    }\r\n    /**\r\n     * Remove a sprite from the list of sprites to render.\r\n     */\r\n    removeSprite(sprite) {\r\n        if (sprite.$index < 0) {\r\n            return;\r\n        }\r\n        const { sprites } = this;\r\n        if (sprites.length === 0) {\r\n            sprite.$index = -1;\r\n            return;\r\n        }\r\n        if (sprites.length === 1) {\r\n            sprite.$index = -1;\r\n            sprites.splice(0, sprites.length);\r\n            this.count = 0;\r\n            return;\r\n        }\r\n        const lastSprite = sprites.pop();\r\n        if (!lastSprite) {\r\n            return;\r\n        }\r\n        lastSprite.$index = sprite.$index;\r\n        lastSprite.update({});\r\n        this.count -= 1;\r\n        sprite.$index = -1;\r\n    }\r\n    render() {\r\n        const { scene, prg, atlas, buffVert, buffElem } = this;\r\n        if (!scene || !prg || !atlas || !buffVert || !buffElem) {\r\n            return;\r\n        }\r\n        const gl = scene.gl;\r\n        // Update sprites' attributes.\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffVert);\r\n        gl.bufferData(gl.ARRAY_BUFFER, this.dataVert, gl.DYNAMIC_DRAW);\r\n        gl.enable(gl.DEPTH_TEST);\r\n        prg.use();\r\n        atlas.activate();\r\n        const uniforms = prg;\r\n        uniforms.$uniTexture = 0;\r\n        uniforms.$uniWidth = scene.width;\r\n        uniforms.$uniHeight = scene.height;\r\n        prg.bindAttribs(buffVert, 'attXYZ', 'attUV');\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffVert);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffElem);\r\n        gl.drawElements(gl.TRIANGLES, NB_ATTRIBS * this.count, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n    destroy(scene) {\r\n        const { gl } = scene;\r\n        const { buffElem, buffVert } = this;\r\n        if (!buffElem || !buffVert) {\r\n            return;\r\n        }\r\n        gl.deleteBuffer(buffElem);\r\n        gl.deleteBuffer(buffVert);\r\n    }\r\n    initialize(scene) {\r\n        this.prg = this.createProgram({ vert, frag });\r\n        const { gl } = scene;\r\n        const buffVert = gl.createBuffer();\r\n        if (!buffVert) {\r\n            throw this.fatal('Not enough memory to create an array buffer!');\r\n        }\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffVert);\r\n        gl.bufferData(gl.ARRAY_BUFFER, this.dataVert, gl.DYNAMIC_DRAW);\r\n        this.buffVert = buffVert;\r\n        const buffElem = gl.createBuffer();\r\n        if (!buffElem) {\r\n            throw this.fatal('Not enough memory to create an array buffer!');\r\n        }\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffElem);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, createElements(BLOCK), gl.DYNAMIC_DRAW);\r\n        this.buffElem = buffElem;\r\n    }\r\n    allocateNewBlock() {\r\n        this.capacity += BLOCK;\r\n        const { scene, buffElem } = this;\r\n        if (!scene) {\r\n            throw Error('No scene!');\r\n        }\r\n        if (!buffElem) {\r\n            throw Error('No buffElem!');\r\n        }\r\n        const { gl } = scene;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffElem);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, createElements(this.capacity), gl.DYNAMIC_DRAW);\r\n        const dataVert = new Float32Array(this.capacity * CHUNK);\r\n        dataVert.set(this.dataVert);\r\n        this.dataVert = dataVert;\r\n    }\r\n}\r\nconst CORNER_B = 1;\r\nconst CORNER_C = 2;\r\nconst CORNER_D = 3;\r\n/**\r\n * A--B\r\n * |  |\r\n * D--C\r\n */\r\nfunction createElements(capacity) {\r\n    const dataElem = new Uint16Array(NB_ATTRIBS * capacity);\r\n    let i = 0;\r\n    let a = 0;\r\n    for (let k = 0; k < capacity; k++) {\r\n        const b = a + CORNER_B;\r\n        const c = a + CORNER_C;\r\n        const d = a + CORNER_D;\r\n        // tslint:disable:no-magic-numbers\r\n        dataElem[i + 0] = a;\r\n        dataElem[i + 1] = d;\r\n        dataElem[i + 2] = b;\r\n        dataElem[i + 3] = b;\r\n        dataElem[i + 4] = d;\r\n        dataElem[i + 5] = c;\r\n        // tslint:enable:no-magic-numbers\r\n        a += NB_CORNERS;\r\n        i += NB_ATTRIBS;\r\n    }\r\n    return dataElem;\r\n}\r\n//# sourceMappingURL=sprites.js.map","references":["/home/petitjea/Code/github/flat-land-gl/src/atlas.ts","/home/petitjea/Code/github/flat-land-gl/src/painter/painter.ts","/home/petitjea/Code/github/flat-land-gl/src/webgl/program.ts","/home/petitjea/Code/github/flat-land-gl/src/scene.ts","/home/petitjea/Code/github/flat-land-gl/src/painter/sprites/sprite.ts","/home/petitjea/Code/github/flat-land-gl/src/types.ts"],"map":"{\"version\":3,\"file\":\"sprites.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/painter/sprites/sprites.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/petitjea/Code/github/flat-land-gl/src/painter/sprites/sprites.d.ts","writeByteOrderMark":false,"text":"import Atlas from '../../atlas';\r\nimport Painter from '../painter';\r\nimport Scene from '../../scene';\r\nimport Sprite, { ISprite } from './sprite';\r\ninterface ISpritesPainterParams {\r\n    atlas: Atlas;\r\n}\r\nexport default class SpritesPainter extends Painter {\r\n    private buffElem?;\r\n    private buffVert?;\r\n    private capacity;\r\n    private count;\r\n    private dataVert;\r\n    private deferedSpriteCreations;\r\n    private readonly params;\r\n    private prg?;\r\n    private sprites;\r\n    constructor(params: ISpritesPainterParams);\r\n    private get atlas();\r\n    createSprite(params: Partial<ISprite>): Sprite;\r\n    /**\r\n     * Remove a sprite from the list of sprites to render.\r\n     */\r\n    removeSprite(sprite: Sprite): void;\r\n    render(): void;\r\n    protected destroy(scene: Scene): void;\r\n    protected initialize(scene: Scene): void;\r\n    private allocateNewBlock;\r\n    /**\r\n     * Since the vertex array can be reallocated, we cannot give a reference to the\r\n     * Float32Array to any Sprite. Instead, we will give them this function that will\r\n     * return the current array.\r\n     */\r\n    private getData;\r\n}\r\nexport {};\r\n"}}
