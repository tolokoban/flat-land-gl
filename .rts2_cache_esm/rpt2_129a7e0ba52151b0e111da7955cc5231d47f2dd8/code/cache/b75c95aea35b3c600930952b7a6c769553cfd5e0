{"code":"// tslint:disable:no-magic-numbers\r\n// tslint:disable:ban\r\n/**\r\n * Fast color manipulations.\r\n * Attributes R  (red), G  (green), B  (blue), A  (alpha), H  (hue), S\r\n * (saturation), and L (luminance) are all floats between 0 and 1.\r\n */\r\nconst CODE_CSS_LENGTHS = ['#RGB'.length, '#RGBA'.length, '#RRGGBB'.length, '#RRGGBBAA'.length];\r\nconst RX_HEX_COLOR = /^#[0-9A-F]+$/gi;\r\nconst LUMINANCE_THRESHOLD = 0.6;\r\nexport default class Color {\r\n    constructor(codeCSS = '#000000') {\r\n        this.R = 0;\r\n        this.G = 0;\r\n        this.B = 0;\r\n        this.H = 0;\r\n        this.S = 0;\r\n        this.L = 0;\r\n        this.A = 1;\r\n        this.parse(codeCSS);\r\n    }\r\n    /**\r\n     * A code CSS is valid if it starts with a '#' and has a length of 3, 4, 6 or 8.\r\n     */\r\n    static isValid(codeCSS) {\r\n        RX_HEX_COLOR.lastIndex = -1;\r\n        if (!RX_HEX_COLOR.test(codeCSS)) {\r\n            return false;\r\n        }\r\n        for (const len of CODE_CSS_LENGTHS) {\r\n            if (codeCSS.length === len)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    static normalize(codeCSS) {\r\n        const color = new Color(codeCSS);\r\n        return color.stringify();\r\n    }\r\n    static luminance(codeCSS) {\r\n        const color = new Color(codeCSS);\r\n        return color.luminance();\r\n    }\r\n    /**\r\n     * Returns 1 for bright colors and 0 for dark colors.\r\n     */\r\n    static luminanceStep(codeCSS) {\r\n        const color = new Color(codeCSS);\r\n        return color.luminanceStep();\r\n    }\r\n    static fromArrayRGB(rgb) {\r\n        const [R, G, B] = rgb;\r\n        return this.newRGB(R, G, B);\r\n    }\r\n    static fromArrayRGBA(rgba) {\r\n        const [R, G, B, A] = rgba;\r\n        return this.newRGBA(R, G, B, A);\r\n    }\r\n    /**\r\n     * Mix two colors. alpha should be between 0 and 1,\r\n     * but there is no check on this.\r\n     * If alpha is 0, the resulting color is `color1`,\r\n     * if alpha is 1, the resulting color is `color2`.\r\n     */\r\n    static mix(color1, color2, alpha = 0.5) {\r\n        const beta = 1 - alpha;\r\n        return Color.newRGBA(alpha * color2.R + beta * color1.R, alpha * color2.G + beta * color1.G, alpha * color2.B + beta * color1.B, alpha * color2.A + beta * color1.A);\r\n    }\r\n    /**\r\n     * If `colors` has only two elements, this method is the same as `mix()`.\r\n     * Otherwise, it will perform a linear blending through the colors.\r\n     * If alpha is 0, the resulting color is `colors[0]`,\r\n     * If alpha is 1, the resulting color is `colors[colors.length - 1]`,\r\n     */\r\n    static ramp(colors, alpha = 0.5) {\r\n        if (colors.length === 0) {\r\n            return Color.newBlack();\r\n        }\r\n        if (colors.length === 1) {\r\n            return colors[0];\r\n        }\r\n        const spacesCount = colors.length - 1;\r\n        const firstColorIndex = Math.floor(alpha * spacesCount);\r\n        const color1 = colors[firstColorIndex];\r\n        if (firstColorIndex === spacesCount) {\r\n            return color1;\r\n        }\r\n        const color2 = colors[firstColorIndex + 1];\r\n        const translatedAlpha = firstColorIndex + alpha / spacesCount;\r\n        return Color.mix(color1, color2, translatedAlpha);\r\n    }\r\n    static newBlack() {\r\n        return Color.newRGB(0, 0, 0);\r\n    }\r\n    static newWhite() {\r\n        return Color.newRGB(1, 1, 1);\r\n    }\r\n    /**\r\n     * Create a new Color instance base on R,G,B channels.\r\n     *\r\n     * @param red - Value between 0 and 1.\r\n     * @param green - Value between 0 and 1.\r\n     * @param blue - Value between 0 and 1.\r\n     * @returns New instance of Color.\r\n     */\r\n    static newRGB(red, green, blue) {\r\n        const color = new Color();\r\n        color.R = red;\r\n        color.G = green;\r\n        color.B = blue;\r\n        color.A = 1;\r\n        return color;\r\n    }\r\n    /**\r\n     * Create a new Color instance base on R,G,B,A channels.\r\n     *\r\n     * @param red - Value between 0 and 1.\r\n     * @param green - Value between 0 and 1.\r\n     * @param blue - Value between 0 and 1.\r\n     * @param alpha - Value between 0 and 1.\r\n     * @returns New instance of Color.\r\n     */\r\n    static newRGBA(red, green, blue, alpha) {\r\n        const color = new Color();\r\n        color.R = red;\r\n        color.G = green;\r\n        color.B = blue;\r\n        color.A = alpha;\r\n        return color;\r\n    }\r\n    toArrayRGB() {\r\n        return [this.R, this.G, this.B];\r\n    }\r\n    toArrayRGBA() {\r\n        return [this.R, this.G, this.B, this.A];\r\n    }\r\n    /**\r\n     * Parse a color writtent in CSS syntax.\r\n     *\r\n     * @param code - CSS color.\r\n     * @returns `true` if the color has valid syntax.\r\n     */\r\n    parse(code = '#000000') {\r\n        const input = code.trim().toUpperCase();\r\n        if (this.parseHexa.call(this, input)) {\r\n            return true;\r\n        }\r\n        if (this.parseRGB.call(this, input)) {\r\n            return true;\r\n        }\r\n        if (this.parseRGBA.call(this, input)) {\r\n            return true;\r\n        }\r\n        if (this.parseHSL.call(this, input)) {\r\n            return true;\r\n        }\r\n        // @TODO parseHSLA.\r\n        return false;\r\n    }\r\n    /**\r\n     * @see https://en.wikipedia.org/wiki/Grayscale\r\n     * @this Color\r\n     * @returns {undefined}\r\n     */\r\n    luminance() {\r\n        const LUM_RED = 0.2126;\r\n        const LUM_GREEN = 0.7152;\r\n        const LUM_BLUE = 0.0722;\r\n        return LUM_RED * this.R + LUM_GREEN * this.G + LUM_BLUE * this.B;\r\n    }\r\n    /**\r\n     * @returns {integer} 0 if the color is dark and 1 if it is light.\r\n     */\r\n    luminanceStep() {\r\n        return this.luminance() < LUMINANCE_THRESHOLD ? 0 : 1;\r\n    }\r\n    /**\r\n     * @this Color\r\n     * @returns String value of the color. `#fd45a7`.\r\n     */\r\n    stringify() {\r\n        const FF = 0xff;\r\n        let color = hexa2(this.R * FF) + hexa2(this.G * FF) + hexa2(this.B * FF);\r\n        if (this.A < 1) {\r\n            color += hexa2(this.A * FF);\r\n        }\r\n        return `#${color}`;\r\n    }\r\n    copy() {\r\n        const newColor = new Color();\r\n        newColor.R = this.R;\r\n        newColor.G = this.G;\r\n        newColor.B = this.B;\r\n        newColor.A = this.A;\r\n        newColor.H = this.H;\r\n        newColor.S = this.S;\r\n        newColor.L = this.L;\r\n        return newColor;\r\n    }\r\n    /**\r\n     * @see https://en.wikipedia.org/wiki/HSL_and_HSV#Converting_to_RGB\r\n     */\r\n    hsl2rgb() {\r\n        const H = 6 * this.H;\r\n        const S = this.S;\r\n        const L = this.L;\r\n        const chroma = (1 - Math.abs(2 * L - 1)) * S;\r\n        const x = chroma * (1 - Math.abs((H % 2) - 1));\r\n        let R = 0;\r\n        let G = 0;\r\n        let B = 0;\r\n        if (H < 3) {\r\n            if (H < 1) {\r\n                R = chroma;\r\n                G = x;\r\n                B = 0;\r\n            }\r\n            else if (H < 2) {\r\n                R = x;\r\n                G = chroma;\r\n                B = 0;\r\n            }\r\n            else {\r\n                // H == 2.\r\n                R = 0;\r\n                G = chroma;\r\n                B = x;\r\n            }\r\n        }\r\n        else if (H < 4) {\r\n            R = 0;\r\n            G = x;\r\n            B = chroma;\r\n        }\r\n        else if (H < 5) {\r\n            R = x;\r\n            G = 0;\r\n            B = chroma;\r\n        }\r\n        else {\r\n            R = chroma;\r\n            G = 0;\r\n            B = x;\r\n        }\r\n        const shift = L - chroma * 0.5;\r\n        this.R = R + shift;\r\n        this.G = G + shift;\r\n        this.B = B + shift;\r\n    }\r\n    rgb2hsl() {\r\n        const R = this.R;\r\n        const G = this.G;\r\n        const B = this.B;\r\n        const min = Math.min(R, G, B);\r\n        const max = Math.max(R, G, B);\r\n        const delta = max - min;\r\n        this.L = 0.5 * (max + min);\r\n        if (delta < 0.000001) {\r\n            this.H = 0;\r\n            this.S = 0;\r\n        }\r\n        else {\r\n            this.S = delta / (1 - Math.abs(2 * this.L - 1));\r\n            if (max === R) {\r\n                if (G >= B) {\r\n                    this.H = INV6 * ((G - B) / delta);\r\n                }\r\n                else {\r\n                    this.H = 1 - INV6 * ((B - G) / delta);\r\n                }\r\n            }\r\n            else if (max === G) {\r\n                this.H = INV6 * (2 + (B - R) / delta);\r\n            }\r\n            else {\r\n                this.H = INV6 * (4 + (R - G) / delta);\r\n            }\r\n        }\r\n    }\r\n    parseHexa(text) {\r\n        if (text.charAt(0) !== '#') {\r\n            return false;\r\n        }\r\n        let R = 0;\r\n        let G = 0;\r\n        let B = 0;\r\n        let A = 1;\r\n        switch (text.length) {\r\n            case 4:\r\n                R = parseInt(text.charAt(1), 16) * INV15;\r\n                G = parseInt(text.charAt(2), 16) * INV15;\r\n                B = parseInt(text.charAt(3), 16) * INV15;\r\n                break;\r\n            case 5:\r\n                R = parseInt(text.charAt(1), 16) * INV15;\r\n                G = parseInt(text.charAt(2), 16) * INV15;\r\n                B = parseInt(text.charAt(3), 16) * INV15;\r\n                A = parseInt(text.charAt(4), 16) * INV15;\r\n                break;\r\n            case 7:\r\n                R = parseInt(text.substr(1, 2), 16) * INV255;\r\n                G = parseInt(text.substr(3, 2), 16) * INV255;\r\n                B = parseInt(text.substr(5, 2), 16) * INV255;\r\n                break;\r\n            case 9:\r\n                R = parseInt(text.substr(1, 2), 16) * INV255;\r\n                G = parseInt(text.substr(3, 2), 16) * INV255;\r\n                B = parseInt(text.substr(5, 2), 16) * INV255;\r\n                A = parseInt(text.substr(7, 2), 16) * INV255;\r\n                break;\r\n            default:\r\n        }\r\n        if (isNaN(R) || isNaN(G) || isNaN(B) || isNaN(A)) {\r\n            this.R = this.G = this.B = this.A = 0;\r\n        }\r\n        else {\r\n            this.R = R;\r\n            this.G = G;\r\n            this.B = B;\r\n            this.A = A;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * @param text - `rgb(200, 140, 50)`\r\n     * @returns `true` if `text` is a valid `rgb()` syntax.\r\n     */\r\n    parseRGB(text) {\r\n        const m = RX_RGB.exec(text);\r\n        if (!m) {\r\n            return false;\r\n        }\r\n        this.R = clamp01(parseInt(m[1], 10) * INV255);\r\n        this.G = clamp01(parseInt(m[2], 10) * INV255);\r\n        this.B = clamp01(parseInt(m[3], 10) * INV255);\r\n        this.A = 1;\r\n        return true;\r\n    }\r\n    /**\r\n     * @param text - `rgba(200, 140, 50, 0.5)`\r\n     * @returns `true` if `text` is a valid `rgba()` syntax.\r\n     */\r\n    parseRGBA(text) {\r\n        const m = RX_RGBA.exec(text);\r\n        if (!m) {\r\n            return false;\r\n        }\r\n        this.R = clamp01(parseInt(m[1], 10) * INV255);\r\n        this.G = clamp01(parseInt(m[2], 10) * INV255);\r\n        this.B = clamp01(parseInt(m[3], 10) * INV255);\r\n        this.A = clamp01(parseFloat(m[4]));\r\n        return true;\r\n    }\r\n    /**\r\n     * @param text - `hsl(200, 140, 50)`\r\n     * @returns `true` if `text` is a valid `hsl()` syntax.\r\n     */\r\n    parseHSL(text) {\r\n        const m = RX_HSL.exec(text);\r\n        if (!m) {\r\n            return false;\r\n        }\r\n        this.H = clamp01(parseInt(m[1], 10) * INV359);\r\n        this.S = clamp01(parseInt(m[2], 10) * INV99);\r\n        this.L = clamp01(parseInt(m[3], 10) * INV99);\r\n        this.A = 1;\r\n        this.hsl2rgb();\r\n        return true;\r\n    }\r\n}\r\nconst INV6 = 1 / 6;\r\nconst INV15 = 1 / 15;\r\nconst INV99 = 1 / 99;\r\nconst INV255 = 1 / 255;\r\nconst INV359 = 1 / 359;\r\nconst RX_RGB = /^RGB[\\s(]+([0-9]+)[^0-9]+([0-9]+)[^0-9]+([0-9]+)/;\r\nconst RX_RGBA = /^RGBA[\\s(]+([0-9]+)[^0-9]+([0-9]+)[^0-9]+([0-9]+)[^0-9.]+([0-9.]+)/;\r\nconst RX_HSL = /^HSL[\\s(]+([0-9]+)[^0-9]+([0-9]+)[^0-9]+([0-9]+)/;\r\nfunction clamp01(value) {\r\n    if (value < 0) {\r\n        return 0;\r\n    }\r\n    if (value > 1) {\r\n        return 1;\r\n    }\r\n    return value;\r\n}\r\nfunction hexa2(value) {\r\n    let out = Math.floor(value).toString(16);\r\n    if (out.length < 2) {\r\n        out = `0${out}`;\r\n    }\r\n    return out;\r\n}\r\n//# sourceMappingURL=color.js.map","references":[],"map":"{\"version\":3,\"file\":\"color.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/webgl/color.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/petitjea/Code/github/flat-land-gl/src/webgl/color.d.ts","writeByteOrderMark":false,"text":"export default class Color {\r\n    /**\r\n     * A code CSS is valid if it starts with a '#' and has a length of 3, 4, 6 or 8.\r\n     */\r\n    static isValid(codeCSS: string): boolean;\r\n    static normalize(codeCSS: string): string;\r\n    static luminance(codeCSS: string): number;\r\n    /**\r\n     * Returns 1 for bright colors and 0 for dark colors.\r\n     */\r\n    static luminanceStep(codeCSS: string): number;\r\n    static fromArrayRGB(rgb: [number, number, number]): Color;\r\n    static fromArrayRGBA(rgba: [number, number, number, number]): Color;\r\n    /**\r\n     * Mix two colors. alpha should be between 0 and 1,\r\n     * but there is no check on this.\r\n     * If alpha is 0, the resulting color is `color1`,\r\n     * if alpha is 1, the resulting color is `color2`.\r\n     */\r\n    static mix(color1: Color, color2: Color, alpha?: number): Color;\r\n    /**\r\n     * If `colors` has only two elements, this method is the same as `mix()`.\r\n     * Otherwise, it will perform a linear blending through the colors.\r\n     * If alpha is 0, the resulting color is `colors[0]`,\r\n     * If alpha is 1, the resulting color is `colors[colors.length - 1]`,\r\n     */\r\n    static ramp(colors: Color[], alpha?: number): Color;\r\n    static newBlack(): Color;\r\n    static newWhite(): Color;\r\n    /**\r\n     * Create a new Color instance base on R,G,B channels.\r\n     *\r\n     * @param red - Value between 0 and 1.\r\n     * @param green - Value between 0 and 1.\r\n     * @param blue - Value between 0 and 1.\r\n     * @returns New instance of Color.\r\n     */\r\n    static newRGB(red: number, green: number, blue: number): Color;\r\n    /**\r\n     * Create a new Color instance base on R,G,B,A channels.\r\n     *\r\n     * @param red - Value between 0 and 1.\r\n     * @param green - Value between 0 and 1.\r\n     * @param blue - Value between 0 and 1.\r\n     * @param alpha - Value between 0 and 1.\r\n     * @returns New instance of Color.\r\n     */\r\n    static newRGBA(red: number, green: number, blue: number, alpha: number): Color;\r\n    R: number;\r\n    G: number;\r\n    B: number;\r\n    H: number;\r\n    S: number;\r\n    L: number;\r\n    A: number;\r\n    constructor(codeCSS?: string);\r\n    toArrayRGB(): [number, number, number];\r\n    toArrayRGBA(): [number, number, number, number];\r\n    /**\r\n     * Parse a color writtent in CSS syntax.\r\n     *\r\n     * @param code - CSS color.\r\n     * @returns `true` if the color has valid syntax.\r\n     */\r\n    parse(code?: string): boolean;\r\n    /**\r\n     * @see https://en.wikipedia.org/wiki/Grayscale\r\n     * @this Color\r\n     * @returns {undefined}\r\n     */\r\n    luminance(): number;\r\n    /**\r\n     * @returns {integer} 0 if the color is dark and 1 if it is light.\r\n     */\r\n    luminanceStep(): number;\r\n    /**\r\n     * @this Color\r\n     * @returns String value of the color. `#fd45a7`.\r\n     */\r\n    stringify(): string;\r\n    copy(): Color;\r\n    /**\r\n     * @see https://en.wikipedia.org/wiki/HSL_and_HSV#Converting_to_RGB\r\n     */\r\n    hsl2rgb(): void;\r\n    rgb2hsl(): void;\r\n    private parseHexa;\r\n    /**\r\n     * @param text - `rgb(200, 140, 50)`\r\n     * @returns `true` if `text` is a valid `rgb()` syntax.\r\n     */\r\n    private parseRGB;\r\n    /**\r\n     * @param text - `rgba(200, 140, 50, 0.5)`\r\n     * @returns `true` if `text` is a valid `rgba()` syntax.\r\n     */\r\n    private parseRGBA;\r\n    /**\r\n     * @param text - `hsl(200, 140, 50)`\r\n     * @returns `true` if `text` is a valid `hsl()` syntax.\r\n     */\r\n    private parseHSL;\r\n}\r\n"}}
