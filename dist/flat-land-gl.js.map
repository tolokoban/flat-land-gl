{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/calc.ts","webpack:///./src/converter/string.ts","webpack:///./src/webgl/program.ts","webpack:///./src/painter/painter.ts","webpack:///./src/painter/background/background.ts","webpack:///./src/webgl/color.ts","webpack:///./src/painter/clear.ts","webpack:///./src/painter/sprites/sprite.ts","webpack:///./src/painter/sprites/sprites.frag","webpack:///./src/painter/sprites/sprites.vert","webpack:///./src/painter/sprites/sprites.ts","webpack:///./src/painter/index.ts","webpack:///./src/atlas.ts","webpack:///./src/webgl/resize.ts","webpack:///./src/pointer.ts","webpack:///./src/scene.ts","webpack:///./src/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","COS","Float32Array","SIN","Math","PI","cos","sin","angle","castString","defaultValue","isNaN","BPE","BYTES_PER_ELEMENT","gl","codes","includes","vert","Error","frag","parseInclude","parseIncludes","this","freeze","_typesNamesLookup","lookup","k","toUpperCase","v","getTypesNamesLookup","shaderProgram","createProgram","program","vertShader","code","getShader","VERTEX_SHADER","getVertexShader","attachShader","fragShader","FRAGMENT_SHADER","getFragmentShader","linkProgram","use","useProgram","attribs","createAttributes","uniforms","createUniforms","getTypeName","typeId","bindAttribs","buffer","that","bindBuffer","ARRAY_BUFFER","totalSize","names","attrib","keys","map","join","length","size","offset","enableVertexAttribArray","location","vertexAttribPointer","FLOAT","setUniform","attribsCount","getProgramParameter","ACTIVE_ATTRIBUTES","index","item","getActiveAttrib","typeName","type","getSize","getAttribLocation","writable","configurable","FLOAT_VEC4","FLOAT_VEC3","FLOAT_VEC2","uniformsCount","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","set","createUniformSetter","createUniformGetter","nameGL","nameJS","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","SAMPLER_2D","uniform1i","uniform1iv","uniform1f","uniform1fv","uniform2fv","uniform3fv","uniform4fv","FLOAT_MAT3","uniformMatrix3fv","FLOAT_MAT4","uniformMatrix4fv","split","line","trim","substr","pos","indexOf","includeName","charAt","snippet","console","error","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","info","getShaderInfoLog","ID","params","_name","scene","$attachPainter","destroy","$detachPainter","shaders","fatal","message","atlas","atlasObj","getAtlas","prg","FRAG","getVert","align","buff","createBuffer","bufferData","STATIC_DRAW","render","enable","DEPTH_TEST","activate","$uniTexture","width","height","drawArrays","TRIANGLE_STRIP","x","y","codeCSS","R","G","B","H","S","L","A","parse","isValid","normalize","Color","stringify","luminance","luminanceStep","fromArrayRGB","rgb","newRGB","fromArrayRGBA","rgba","newRGBA","mix","color1","color2","alpha","beta","ramp","colors","newBlack","spacesCount","firstColorIndex","floor","translatedAlpha","newWhite","red","green","blue","color","toArrayRGB","toArrayRGBA","input","parseHexa","parseRGB","parseRGBA","parseHSL","hexa2","copy","newColor","hsl2rgb","chroma","abs","shift","rgb2hsl","min","max","delta","INV6","text","parseInt","INV15","INV255","RX_RGB","exec","clamp01","RX_RGBA","parseFloat","RX_HSL","INV359","INV99","out","toString","_red","_green","_blue","_alpha","cssColor","clearColor","clear","COLOR_BUFFER_BIT","getData","extra","$index","z","originX","originY","u0","v0","u1","v1","scale","update","newParams","data","xxA","yyA","xxB","yyB","xxC","yyC","xxD","yyD","xA","yA","xB","yB","xC","yC","xD","yD","C","BLOCK","CHUNK","NB_ATTRIBS","createElements","capacity","dataElem","Uint16Array","a","b","Background","Clear","Painter","Sprites","dataVert","sprites","count","buffVert","DYNAMIC_DRAW","buffElem","ELEMENT_ARRAY_BUFFER","createSprite","allocateNewBlock","sprite","push","removeSprite","splice","lastSprite","pop","$uniWidth","$uniHeight","drawElements","TRIANGLES","_ready","_width","_height","texture","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_MAG_FILTER","deleteTexture","unit","UNITS","TEXTURE0","TEXTURE1","TEXTURE2","TEXTURE3","TEXTURE4","TEXTURE5","TEXTURE6","TEXTURE7","activeTexture","load","loadImage","image","url","Promise","resolve","reject","img","Image","onload","texImage2D","RGBA","onerror","src","resolution","window","devicePixelRatio","canvas","displayWidth","clientWidth","displayHeight","clientHeight","viewport","_x","_y","_down","_downTime","_eventDown","_eventUp","onMouseMove","evt","computeCoords","clientX","clientY","onTouchMove","te","touches","onMouseDown","onDown","onTouchStart","onMouseUp","onUp","onTouchEnd","addEventListener","reset","Date","now","pointerX","pointerY","rect","getBoundingClientRect","left","top","w","h","onAnimation","activePainters","isRendering","_pointerX","_pointerY","_pointerTap","_pointerDownTime","time","requestAnimationFrame","clearDepth","DEPTH_BUFFER_BIT","depthFunc","GEQUAL","pointer","ex","stop","_pointer","getContext","_gl","atlases","Map","painters","drawingBufferWidth","drawingBufferHeight","slice","createAtlas","destroyAtlas","delete","painter","has","filter","start","Calc","Scene"],"mappings":"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","file":"flat-land-gl.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","const COS = new Float32Array(4096)\nconst SIN = new Float32Array(4096)\n\n// Prepare acceleration table for COS and SIN.\nfor (let i = 0 ; i < 4096 ; i++) {\n    const angle = Math.PI * i / 2048\n    COS[i] = Math.cos(angle)\n    SIN[i] = Math.sin(angle)\n}\n\nexport default { cos, sin }\n\n/**\n * Fast cosine.\n * Angle is define between 0 and 4095.\n * * PI/2  <=>  1023\n * * PI  <=>  2047\n * * 3*PI/2  <=>  3071\n */\nfunction cos(angle: number) {\n    return COS[(angle|0) & 4095]\n}\n\n/**\n * Fast sine.\n * Angle is define between 0 and 4095.\n * * PI/2  <=>  1023\n * * PI  <=>  2047\n * * 3*PI/2  <=>  3071\n */\nfunction sin(angle: number) {\n    return SIN[(angle|0) & 4095]\n}\n","export default function castString(value: any, defaultValue: string = \"\"): string {\r\n    const t = typeof value\r\n    if (t === \"number\" && !isNaN(value)) {\r\n        return `${value}`\r\n    }\r\n    if (t === \"string\") { return value }\r\n    return defaultValue\r\n}\r\n","const BPE = Float32Array.BYTES_PER_ELEMENT\r\n\r\nexport interface IShaders { vert: string, frag: string }\r\n\r\ninterface IAttrib extends WebGLActiveInfo {\r\n    typeName: string,\r\n    length: number,\r\n    location: number\r\n}\r\ninterface IAttribsDic {\r\n    [key: string]: IAttrib\r\n}\r\ninterface IUniformsDic {\r\n    [key: string]: WebGLUniformLocation\r\n}\r\n\r\n/**\r\n * Creating  a  WebGL  program  for shaders  is  painful.  This  class\r\n * simplifies the process.\r\n *\r\n * @class Program\r\n *\r\n * Object properties starting with `$` are WebGL uniforms or attributes.\r\n * Uniforms behave as expected: you can read/write a value.\r\n * Attributes when read, return the location. And when written, enable/disabled\r\n * this attribute. So you read integers and writte booleans.\r\n *\r\n * @param gl - WebGL context.\r\n * @param codes  - Object  with two  mandatory attributes:  `vert` for\r\n * vertex shader and `frag` for fragment shader.\r\n * @param  includes  -  (optional)  If  defined,  the  `#include  foo`\r\n * directives  of  shaders   will  be  replaced  by   the  content  of\r\n * `includes.foo`.\r\n */\r\nexport default class Program {\r\n    public readonly gl: WebGLRenderingContext\r\n    public readonly BPE: number\r\n    public readonly program: WebGLProgram\r\n    public readonly attribs: IAttribsDic\r\n    public readonly uniforms: IUniformsDic\r\n    private _typesNamesLookup: {[key: number]: string}\r\n\r\n    constructor(gl: WebGLRenderingContext,\r\n                codes: IShaders,\r\n                includes: { [key: string]: string } = {}) {\r\n        if (typeof codes.vert !== \"string\") {\r\n            throw Error(\"[webgl.program] Missing attribute `vert` in argument `codes`!\")\r\n        }\r\n        if (typeof codes.frag !== \"string\") {\r\n            throw Error(\"[webgl.program] Missing attribute `frag` in argument `codes`!\")\r\n        }\r\n\r\n        codes = parseIncludes(codes, includes)\r\n\r\n        this.gl = gl\r\n        Object.freeze(this.gl)\r\n        this.BPE = BPE\r\n        Object.freeze(this.BPE)\r\n\r\n        this._typesNamesLookup = getTypesNamesLookup(gl)\r\n\r\n        const shaderProgram = gl.createProgram()\r\n        if (!shaderProgram) {\r\n            throw Error(\"Unable to create WebGLProgram!\")\r\n        }\r\n        this.program = shaderProgram\r\n        const vertShader = getVertexShader(gl, codes.vert)\r\n        gl.attachShader(shaderProgram, vertShader)\r\n        const fragShader = getFragmentShader(gl, codes.frag)\r\n        gl.attachShader(shaderProgram, fragShader)\r\n        gl.linkProgram(shaderProgram)\r\n\r\n        this.use = () => { gl.useProgram(shaderProgram) }\r\n\r\n        this.attribs = this.createAttributes()\r\n        this.uniforms = this.createUniforms()\r\n    }\r\n\r\n    public use() {\r\n        this.gl.useProgram(this.program)\r\n    }\r\n\r\n    public getTypeName(typeId: number) {\r\n        return this._typesNamesLookup[typeId]\r\n    }\r\n\r\n    public bindAttribs(buffer: WebGLBuffer, ...names: string[]) {\r\n        const that = this\r\n        const { gl } = this\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n\r\n        let totalSize = 0\r\n        for (const name of names) {\r\n            const attrib = that.attribs[name]\r\n            if (!attrib) {\r\n                throw Error(\"Cannot find attribute \\\"\" + name + \"\\\"!\\n\" +\r\n                    \"It may be not active because unused in the shader.\\n\" +\r\n                    \"Available attributes are: \" +\r\n                    Object.keys(that.attribs).map((n) => {\r\n                        return '\"' + n + '\"'\r\n                    }).join(\", \") + ` (${that.attribs.length})`)\r\n            }\r\n            totalSize += (attrib.size * attrib.length) * BPE\r\n        }\r\n\r\n        let offset = 0\r\n        for (const name of names) {\r\n            const attrib = that.attribs[name]\r\n            gl.enableVertexAttribArray(attrib.location)\r\n            gl.vertexAttribPointer(\r\n                attrib.location,\r\n                attrib.size * attrib.length,\r\n                gl.FLOAT,\r\n                false, // No normalisation.\r\n                totalSize,\r\n                offset,\r\n            )\r\n            offset += (attrib.size * attrib.length) * BPE\r\n        }\r\n    }\r\n\r\n    public setUniform(name: string, value: any) {\r\n        const id = \"$\" + name\r\n        const map = this as {[key: string]: any}\r\n        map[id] = value\r\n    }\r\n\r\n    private createAttributes(): IAttribsDic {\r\n        const { gl, program } = this\r\n        const attribs: IAttribsDic = {}\r\n        const attribsCount = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES)\r\n        for (let index = 0; index < attribsCount; index++) {\r\n            const item: IAttrib | null = gl.getActiveAttrib(program, index) as IAttrib\r\n            if (!item) { continue }\r\n            item.typeName = this.getTypeName(item.type)\r\n            item.length = this.getSize(gl, item)\r\n            item.location = gl.getAttribLocation(program, item.name)\r\n            attribs[item.name] = item\r\n            Object.defineProperty(this, \"$\" + item.name, {\r\n                value: item.location,\r\n                writable: false,\r\n                enumerable: true,\r\n                configurable: false,\r\n            })\r\n        }\r\n        return attribs\r\n    }\r\n\r\n    private getSize(gl: WebGLRenderingContext, item: IAttrib): number {\r\n        switch (item.type) {\r\n            case gl.FLOAT_VEC4:\r\n                return 4\r\n            case gl.FLOAT_VEC3:\r\n                return 3\r\n            case gl.FLOAT_VEC2:\r\n                return 2\r\n            case gl.FLOAT:\r\n                return 1\r\n            default:\r\n                throw Error(\"[webgl.program:getSize] I don't know the size of the attribute '\" + item.name +\r\n                    \"' because I don't know the type \" + this.getTypeName(item.type) + \"!\")\r\n        }\r\n    }\r\n\r\n    private createUniforms(): IUniformsDic {\r\n        const { gl, program } = this\r\n        const uniforms: IUniformsDic = {}\r\n        const uniformsCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS)\r\n        for (let index = 0; index < uniformsCount; index++) {\r\n            const item = gl.getActiveUniform(program, index)\r\n            if (!item) { continue }\r\n            const location = gl.getUniformLocation(program, item.name)\r\n            if (!location) { continue }\r\n            uniforms[item.name] = location\r\n            Object.defineProperty(this, \"$\" + item.name, {\r\n                set: this.createUniformSetter(item, uniforms[item.name], this._typesNamesLookup),\r\n                get: this.createUniformGetter(item),\r\n                enumerable: true,\r\n                configurable: false,\r\n            })\r\n        }\r\n\r\n        return uniforms\r\n    }\r\n\r\n    private createUniformSetter(item: WebGLActiveInfo,\r\n                                nameGL: WebGLUniformLocation,\r\n                                lookup: {[key: number]: string}) {\r\n        const { gl } = this\r\n        const nameJS = \"_$\" + item.name\r\n\r\n        switch (item.type) {\r\n            case gl.BYTE:\r\n            case gl.UNSIGNED_BYTE:\r\n            case gl.SHORT:\r\n            case gl.UNSIGNED_SHORT:\r\n            case gl.INT:\r\n            case gl.UNSIGNED_INT:\r\n            case gl.SAMPLER_2D: // For textures, we specify the texture unit.\r\n                if (item.size === 1) {\r\n                    return function(this: {[key: string]: number}, v: number) {\r\n                        gl.uniform1i(nameGL, v)\r\n                        this[nameJS] = v\r\n                    }\r\n                } else {\r\n                    return function(this: {[key: string]: Int32List}, v: Int32List) {\r\n                        gl.uniform1iv(nameGL, v)\r\n                        this[nameJS] = v\r\n                    }\r\n                }\r\n            case gl.FLOAT:\r\n                if (item.size === 1) {\r\n                    return function(this: {[key: string]: number}, v: number) {\r\n                        gl.uniform1f(nameGL, v)\r\n                        this[nameJS] = v\r\n                    }\r\n                } else {\r\n                    return function(this: {[key: string]: Float32List}, v: Float32List) {\r\n                        gl.uniform1fv(nameGL, v)\r\n                        this[nameJS] = v\r\n                    }\r\n                }\r\n            case gl.FLOAT_VEC2:\r\n                if (item.size === 1) {\r\n                    return function(this: {[key: string]: Float32List}, v: Float32List) {\r\n                        gl.uniform2fv(nameGL, v)\r\n                        this[nameJS] = v\r\n                    }\r\n                } else {\r\n                    throw Error(\r\n                        \"[webgl.program.createWriter] Don't know how to deal arrays of FLOAT_VEC2 in uniform `\" +\r\n                        item.name + \"'!'\",\r\n                    )\r\n                }\r\n            case gl.FLOAT_VEC3:\r\n                if (item.size === 1) {\r\n                    return function(this: {[key: string]: Float32List}, v: Float32List) {\r\n                        gl.uniform3fv(nameGL, v)\r\n                        this[nameJS] = v\r\n                    }\r\n                } else {\r\n                    throw Error(\r\n                        \"[webgl.program.createWriter] Don't know how to deal arrays of FLOAT_VEC3 in uniform `\" +\r\n                        item.name + \"'!'\",\r\n                    )\r\n                }\r\n            case gl.FLOAT_VEC4:\r\n                if (item.size === 1) {\r\n                    return function(this: {[key: string]: Float32List}, v: Float32List) {\r\n                        gl.uniform4fv(nameGL, v)\r\n                        this[nameJS] = v\r\n                    }\r\n                } else {\r\n                    throw Error(\r\n                        \"[webgl.program.createWriter] Don't know how to deal arrays of FLOAT_VEC4 in uniform `\" +\r\n                        item.name + \"'!'\",\r\n                    )\r\n                }\r\n            case gl.FLOAT_MAT3:\r\n                if (item.size === 1) {\r\n                    return function(this: {[key: string]: Float32List}, v: Float32List) {\r\n                        gl.uniformMatrix3fv(nameGL, false, v)\r\n                        this[nameJS] = v\r\n                    }\r\n                } else {\r\n                    throw Error(\r\n                        \"[webgl.program.createWriter] Don't know how to deal arrays of FLOAT_MAT3 in uniform `\" +\r\n                        item.name + \"'!'\",\r\n                    )\r\n                }\r\n            case gl.FLOAT_MAT4:\r\n                if (item.size === 1) {\r\n                    return function(this: {[key: string]: Float32List}, v: Float32List) {\r\n                        gl.uniformMatrix4fv(nameGL, false, v)\r\n                        this[nameJS] = v\r\n                    }\r\n                } else {\r\n                    throw Error(\r\n                        \"[webgl.program.createWriter] Don't know how to deal arrays of FLOAT_MAT4 in uniform `\" +\r\n                        item.name + \"'!'\",\r\n                    )\r\n                }\r\n            default:\r\n                throw Error(\r\n                    \"[webgl.program.createWriter] Don't know how to deal with uniform `\" +\r\n                    item.name + \"` of type \" + lookup[item.type] + \"!\",\r\n                )\r\n        }\r\n    }\r\n\r\n    private createUniformGetter(item: WebGLActiveInfo) {\r\n        const name = \"_$\" + item.name\r\n        return function(this: {[key: string]: any}) {\r\n            return this[name]\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * This is a preprocessor for shaders.\r\n * Directives  `#include`  will be  replaced  by  the content  of  the\r\n * correspondent attribute in `includes`.\r\n */\r\nfunction parseIncludes(codes: IShaders, includes: { [key: string]: string }): IShaders {\r\n    return {\r\n        vert: parseInclude(codes.vert, includes),\r\n        frag: parseInclude(codes.frag, includes),\r\n    }\r\n}\r\n\r\nfunction parseInclude(code: string, includes: { [key: string]: string }): string {\r\n    return code.split(\"\\n\").map((line) => {\r\n        if (line.trim().substr(0, 8) !== \"#include\") { return line }\r\n        const pos = line.indexOf(\"#include\") + 8\r\n        let includeName = line.substr(pos).trim()\r\n        // We accept all this systaxes:\r\n        // #include foo\r\n        // #include 'foo'\r\n        // #include <foo>\r\n        // #include \"foo\"\r\n        if (\"'<\\\"\".indexOf(includeName.charAt(0)) > -1) {\r\n            includeName = includeName.substr(1, includeName.length - 2)\r\n        }\r\n        const snippet = includes[includeName]\r\n        if (typeof snippet !== \"string\") {\r\n            console.error(\"Include <\" + includeName + \"> not found in \", includes)\r\n            throw Error(\"Include not found in shader: \" + includeName)\r\n        }\r\n        return snippet\r\n    }).join(\"\\n\")\r\n}\r\n\r\nfunction getShader(type: number, gl: WebGLRenderingContext, code: string): WebGLShader {\r\n    if (type !== gl.VERTEX_SHADER && type !== gl.FRAGMENT_SHADER) {\r\n        throw Error(\"Type must be VERTEX_SHADER or FRAGMENT_SHADER!\")\r\n    }\r\n    const shader = gl.createShader(type)\r\n    if (!shader) {\r\n        throw Error(`Unable to create a ${type === gl.VERTEX_SHADER ? \"VERTEX\" : \"FRAGMENT\"} shader!`)\r\n    }\r\n    gl.shaderSource(shader, code)\r\n    gl.compileShader(shader)\r\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n        console.info(\"Here is your buggy shader's code:\")\r\n        console.info(code)\r\n        console.error(\"An error occurred compiling the shader: \" + gl.getShaderInfoLog(shader))\r\n        throw Error(`Unable to create a ${type === gl.VERTEX_SHADER ? \"VERTEX\" : \"FRAGMENT\"} shader!`)\r\n    }\r\n\r\n    return shader\r\n}\r\n\r\nfunction getFragmentShader(gl: WebGLRenderingContext, code: string) {\r\n    return getShader(gl.FRAGMENT_SHADER, gl, code)\r\n}\r\n\r\nfunction getVertexShader(gl: WebGLRenderingContext, code: string) {\r\n    return getShader(gl.VERTEX_SHADER, gl, code)\r\n}\r\n\r\nfunction getTypesNamesLookup(gl: WebGLRenderingContext): {} {\r\n    const lookup: {[key: number]: string} = {}\r\n\r\n    for (const k in gl) {\r\n        if (k !== k.toUpperCase()) { continue }\r\n        const v = (gl as {[key: string]: any})[k]\r\n        if (typeof v === \"number\") {\r\n            lookup[v] = k\r\n        }\r\n    }\r\n    return lookup\r\n}\r\n","/**\n * This is a virtual painter from which all the other will inherit.\n */\n\nimport Scene from \"../scene\"\nimport Program, { IShaders } from \"../webgl/program\"\n\nlet ID = 0\n\nexport interface IPainterParams {\n    name?: string,\n    scene: Scene\n}\n\nexport default abstract class Painter {\n\n    get name() { return this._name }\n    protected _name: string = `${ID++}`\n    protected readonly scene: Scene\n\n    constructor(params: IPainterParams) {\n        if (!params.scene) { throw Error('Argument \"params.scene\" is mandatory!') }\n        this.scene = params.scene\n        if (typeof params.name === \"string\" && params.name.length > 0) {\n            this._name = params.name\n        }\n        this.scene.$attachPainter(this)\n    }\n\n    public destroy() {\n        this.scene.$detachPainter(this.name)\n    }\n\n    public abstract render(time: number): void\n\n    protected createProgram(shaders: IShaders, includes: { [key: string]: string } = {}): Program {\n        return new Program(this.scene.gl, shaders, includes)\n    }\n\n    protected fatal(message: any) {\n        console.error(`Fatal error in Painter \"${this.name}\":`, message)\n        return new Error(message)\n    }\n}\n","/**\n * Background the screen by filling it with an image that covers it entirely.\n */\n  import Atlas from \"../../atlas\"\n  import castString from \"../../converter/string\"\n  import Program from \"../../webgl/program\"\n  import Painter, { IPainterParams } from \"../painter\"\n\n  interface IBackgroundPainterParams extends IPainterParams {\n    atlas: string,\n    align?: string\n}\n\n  export default class BackgroundPainter extends Painter {\n    private readonly atlas: Atlas\n    private readonly prg: Program\n    private readonly buff: WebGLBuffer\n\n    /**\n     * params: { atlas, align }\n     * - align: if undefined, the background will be centered.\n     *          \"R\" means that the Right edge of the background is always visible.\n     *          \"L\" means the same for Left.\n     *          \"T\" for Top.\n     *          \"B\" for \"Bottom\".\n     */\n    constructor(params: IBackgroundPainterParams) {\n        super(params)\n        const { scene, atlas } = params\n        const atlasObj = scene.getAtlas(atlas)\n        if (!atlasObj) {\n            throw this.fatal(`Atlas \"${atlas}\" not found!`)\n        }\n\n        this.atlas = atlasObj\n        this.prg = this.createProgram({\n            frag: FRAG,\n            vert: getVert(castString(params.align).toUpperCase()),\n        })\n        const { gl } = scene\n        const buff = gl.createBuffer()\n        if (!buff) {\n            throw this.fatal(\"Not enough memory to create an array buffer!\")\n        }\n\n        gl.bindBuffer( gl.ARRAY_BUFFER, buff )\n        gl.bufferData( gl.ARRAY_BUFFER, new Float32Array([\n            0, 0, 0, 1, 1, 0, 1, 1,\n        ]), gl.STATIC_DRAW )\n        this.buff = buff\n    }\n\n    public render() {\n        const { scene, prg, atlas, buff } = this\n        const gl = scene.gl\n        gl.enable(gl.DEPTH_TEST)\n        prg.use()\n        atlas.activate()\n        const uniforms = prg as {[key: string]: any}\n        uniforms.$uniTexture = 0\n        prg.setUniform(\"uniAspectRatio\", scene.width / scene.height)\n        prg.bindAttribs(buff, \"attXY\")\n        gl.bindBuffer( gl.ARRAY_BUFFER, buff )\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n    }\n}\n\n  function getVert(align: string) {\n    let x = \"\"\n    let y = \"\"\n\n    if (align.indexOf(\"B\") !== -1) {\n        y = \"location.y -= uniAspectRatio - 1.0;\"\n    } else if (align.indexOf(\"T\") !== -1) {\n        y = \"location.y += uniAspectRatio - 1.0;\"\n    }\n    if (align.indexOf(\"R\") !== -1) {\n        x = \"location.x -= 1.0 / uniAspectRatio - 1.0;\"\n    } else if (align.indexOf(\"L\") !== -1) {\n        x = \"location.x += 1.0 / uniAspectRatio - 1.0;\"\n    }\n\n    return `uniform float uniAspectRatio;\nattribute vec2 attXY;\nvarying vec2 varUV;\n\nvoid main() {\n  varUV = attXY;\n  vec2 location = 2.0 * (attXY - vec2(0.5, 0.5));\n\n  if (uniAspectRatio > 1.0) {\n    location.y *= uniAspectRatio;${y}\n  } else {\n    location.x /= uniAspectRatio;${x}\n  }\n\n  gl_Position = vec4(location.x, -location.y, -1.0, 1.0);\n}`\n}\n\n  const FRAG = `precision mediump float;\nuniform sampler2D uniTexture;\nvarying vec2 varUV;\n\nvoid main() {\n  vec4 color = texture2D( uniTexture, varUV );\n  gl_FragColor = color;\n}`\n","/**\n * Fast color manipulations.\n * Attributes R  (red), G  (green), B  (blue), A  (alpha), H  (hue), S\n * (saturation), and L (luminance) are all floats between 0 and 1.\n */\nconst TOTO = \"useless\"\n\nexport default class Color {\n    public static isValid(codeCSS: string) {\n        if ( typeof codeCSS !== \"string\" ) { return false }\n        if ( codeCSS.charAt(0) !== \"#\" ) { return false }\n        switch ( codeCSS.length ) {\n            case 4:  // #RGB\n            case 5:  // #RGBA\n            case 7:  // #RRGGBB\n            case 9:  // #RRGGBBAA\n                return true\n        }\n\n        return false\n    }\n\n    public static normalize(codeCSS: string) {\n        const color = new Color(codeCSS)\n        return color.stringify()\n    }\n\n    public static luminance(codeCSS: string) {\n        const color = new Color(codeCSS)\n        return color.luminance()\n    }\n\n    /**\n     * Returns 1 for bright colors and 0 for dark colors.\n     */\n    public static luminanceStep(codeCSS: string) {\n        const color = new Color(codeCSS)\n        return color.luminanceStep()\n    }\n\n    public static fromArrayRGB(rgb: [number, number, number]): Color {\n        const [R, G, B] = rgb\n        return this.newRGB(R, G, B)\n    }\n\n    public static fromArrayRGBA(rgba: [number, number, number, number]): Color {\n        const [R, G, B, A] = rgba\n        return this.newRGBA(R, G, B, A)\n    }\n\n    /**\n     * Mix two colors. alpha should be between 0 and 1,\n     * but there is no check on this.\n     * If alpha is 0, the resulting color is `color1`,\n     * if alpha is 1, the resulting color is `color2`.\n     */\n    public static mix(color1: Color, color2: Color, alpha: number= .5): Color {\n        const beta = 1 - alpha\n        return Color.newRGBA(\n            alpha * color2.R + beta * color1.R,\n            alpha * color2.G + beta * color1.G,\n            alpha * color2.B + beta * color1.B,\n            alpha * color2.A + beta * color1.A,\n        )\n    }\n\n    /**\n     * If `colors` has only two elements, this method is the same as `mix()`.\n     * Otherwise, it will perform a linear blending through the colors.\n     * If alpha is 0, the resulting color is `colors[0]`,\n     * If alpha is 1, the resulting color is `colors[colors.length - 1]`,\n     */\n    public static ramp(colors: Color[], alpha: number= .5): Color {\n        if (colors.length === 0) { return Color.newBlack() }\n        if (colors.length === 1) { return colors[0] }\n\n        const spacesCount = colors.length - 1\n        const firstColorIndex = Math.floor(alpha * spacesCount)\n        const color1 = colors[firstColorIndex]\n        if (firstColorIndex === spacesCount) { return color1 }\n        const color2 = colors[firstColorIndex + 1]\n        const translatedAlpha = firstColorIndex + alpha / spacesCount\n        return Color.mix(color1, color2, translatedAlpha)\n    }\n\n    public static newBlack() {\n        return Color.newRGB(0, 0, 0)\n    }\n\n    public static newWhite() {\n        return Color.newRGB(1, 1, 1)\n    }\n\n    /**\n     * Create a new Color instance base on R,G,B channels.\n     *\n     * @param   {number} red - Value between 0 and 1.\n     * @param   {number} green - Value between 0 and 1.\n     * @param   {number} blue - Value between 0 and 1.\n     * @returns {Color} New instance of Color.\n     */\n    public static newRGB(red: number, green: number, blue: number) {\n        const color = new Color()\n        color.R = red\n        color.G = green\n        color.B = blue\n        color.A = 1\n        return color\n    }\n\n    /**\n     * Create a new Color instance base on R,G,B,A channels.\n     *\n     * @param   {number} red - Value between 0 and 1.\n     * @param   {number} green - Value between 0 and 1.\n     * @param   {number} blue - Value between 0 and 1.\n     * @param   {number} alpha - Value between 0 and 1.\n     * @returns {Color} New instance of Color.\n     */\n    public static newRGBA(red: number, green: number, blue: number, alpha: number) {\n        const color = new Color()\n        color.R = red\n        color.G = green\n        color.B = blue\n        color.A = alpha\n        return color\n    }\n    public R: number\n    public G: number\n    public B: number\n    public H: number\n    public S: number\n    public L: number\n    public A: number\n\n    constructor(codeCSS: string = \"#000000\") {\n        this.R = 0\n        this.G = 0\n        this.B = 0\n        this.H = 0\n        this.S = 0\n        this.L = 0\n        this.A = 1\n\n        this.parse(codeCSS)\n    }\n\n    public toArrayRGB(): [number, number, number] {\n        return [this.R, this.G, this.B]\n    }\n\n    public toArrayRGBA(): [number, number, number, number] {\n        return [this.R, this.G, this.B, this.A]\n    }\n\n    /**\n     * Parse a color writtent in CSS syntax.\n     *\n     * @param   {string} code - CSS color.\n     * @returns {boolean} `true` if the color has valid syntax.\n     */\n    public parse(code: string = \"#000000\"): boolean {\n        const input = code.trim().toUpperCase()\n        if (this.parseHexa.call(this, input)) { return true }\n        if (this.parseRGB.call(this, input)) { return true }\n        if (this.parseRGBA.call(this, input)) { return true }\n        if (this.parseHSL.call(this, input)) { return true }\n        // @TODO parseHSLA.\n        return false\n    }\n\n    /**\n     * @see https://en.wikipedia.org/wiki/Grayscale\n     * @this Color\n     * @returns {undefined}\n     */\n    public luminance(): number {\n        return (0.2126 * this.R) + (0.7152 * this.G) + (0.0722 * this.B)\n    }\n\n    /**\n     * @returns {integer} 0 if the color is dark and 1 if it is light.\n     */\n    public luminanceStep(): number {\n        return this.luminance() < .6 ? 0 : 1\n    }\n\n    /**\n     * @this Color\n     * @returns {string} String value of the color. `#fd45a7`.\n     */\n    public stringify() {\n        let color = hexa2(this.R * 255) + hexa2(this.G * 255) + hexa2(this.B * 255)\n        if (this.A < 1) {\n            color += hexa2(this.A * 255)\n        }\n        return `#${color}`\n    }\n\n    public copy() {\n        const newColor = new Color()\n        newColor.R = this.R\n        newColor.G = this.G\n        newColor.B = this.B\n        newColor.A = this.A\n        newColor.H = this.H\n        newColor.S = this.S\n        newColor.L = this.L\n        return newColor\n    }\n\n    /**\n     * @see https://en.wikipedia.org/wiki/HSL_and_HSV#Converting_to_RGB\n     * @this Color\n     * @returns {undefined}\n     */\n    public hsl2rgb() {\n        const H = 6 * this.H\n        const S = this.S\n        const L = this.L\n        const chroma = (1 - Math.abs(2 * L - 1)) * S\n        const x = chroma * (1 - Math.abs(H % 2 - 1))\n\n        let R = 0\n        let G = 0\n        let B = 0\n\n        if (H < 3) {\n            if (H < 1) {\n                R = chroma; G = x; B = 0\n            } else if (H < 2) {\n                R = x; G = chroma; B = 0\n            } else {\n                // H == 2.\n                R = 0; G = chroma; B = x\n            }\n        } else if (H < 4) {\n            R = 0; G = x; B = chroma\n        } else if (H < 5) {\n            R = x; G = 0; B = chroma\n        } else {\n            R = chroma; G = 0; B = x\n        }\n\n        const shift = L - chroma * 0.5\n        this.R = R + shift\n        this.G = G + shift\n        this.B = B + shift\n    }\n\n    public rgb2hsl() {\n        const R = this.R\n        const G = this.G\n        const B = this.B\n\n        const min = Math.min(R, G, B)\n        const max = Math.max(R, G, B)\n        const delta = max - min\n\n        this.L = 0.5 * (max + min)\n\n        if (delta < 0.000001) {\n            this.H = 0\n            this.S = 0\n        } else {\n            this.S = delta / (1 - Math.abs(2 * this.L - 1))\n            if (max === R) {\n                if (G >= B) {\n                    this.H = INV6 * ((G - B) / delta)\n                } else {\n                    this.H = 1 - INV6 * ((B - G) / delta)\n                }\n            } else if (max === G) {\n                this.H = INV6 * (2 + (B - R) / delta)\n            } else {\n                this.H = INV6 * (4 + (R - G) / delta)\n            }\n        }\n    }\n\n    private parseHexa(text: string) {\n        if (text.charAt(0) !== \"#\") { return false }\n        let R = 0\n        let G = 0\n        let B = 0\n        let A = 1\n\n        switch (text.length) {\n            case 4:\n                R = parseInt(text.charAt(1), 16) * INV15\n                G = parseInt(text.charAt(2), 16) * INV15\n                B = parseInt(text.charAt(3), 16) * INV15\n                break\n            case 5:\n                R = parseInt(text.charAt(1), 16) * INV15\n                G = parseInt(text.charAt(2), 16) * INV15\n                B = parseInt(text.charAt(3), 16) * INV15\n                A = parseInt(text.charAt(4), 16) * INV15\n                break\n            case 7:\n                R = parseInt(text.substr(1, 2), 16) * INV255\n                G = parseInt(text.substr(3, 2), 16) * INV255\n                B = parseInt(text.substr(5, 2), 16) * INV255\n                break\n            case 9:\n                R = parseInt(text.substr(1, 2), 16) * INV255\n                G = parseInt(text.substr(3, 2), 16) * INV255\n                B = parseInt(text.substr(5, 2), 16) * INV255\n                A = parseInt(text.substr(7, 2), 16) * INV255\n                break\n            default:\n        }\n\n        if (isNaN(R) || isNaN(G) || isNaN(B) || isNaN(A)) {\n            this.R = this.G = this.B = this.A = 0\n        } else {\n            this.R = R\n            this.G = G\n            this.B = B\n            this.A = A\n        }\n\n        return true\n    }\n\n    /**\n     * @param   {string} text - `rgb(200, 140, 50)`\n     * @returns {boolean} `true` if `text` is a valid `rgb()` syntax.\n     */\n    private parseRGB(text: string) {\n        const m = RX_RGB.exec(text)\n        if (!m) { return false }\n        this.R = clamp01(parseInt(m[1], 10) * INV255)\n        this.G = clamp01(parseInt(m[2], 10) * INV255)\n        this.B = clamp01(parseInt(m[3], 10) * INV255)\n        this.A = 1\n        return true\n    }\n\n    /**\n     * @param   {string} text - `rgba(200, 140, 50, 0.5)`\n     * @returns {boolean} `true` if `text` is a valid `rgba()` syntax.\n     */\n    private parseRGBA(text: string) {\n        const m = RX_RGBA.exec(text)\n        if (!m) { return false }\n        this.R = clamp01(parseInt(m[1], 10) * INV255)\n        this.G = clamp01(parseInt(m[2], 10) * INV255)\n        this.B = clamp01(parseInt(m[3], 10) * INV255)\n        this.A = clamp01(parseFloat(m[4]))\n        return true\n    }\n\n    /**\n     * @param   {string} text - `hsl(200, 140, 50)`\n     * @returns {boolean} `true` if `text` is a valid `hsl()` syntax.\n     */\n    private parseHSL(text: string) {\n        const m = RX_HSL.exec(text)\n        if (!m) { return false }\n        this.H = clamp01(parseInt(m[1], 10) * INV359)\n        this.S = clamp01(parseInt(m[2], 10) * INV99)\n        this.L = clamp01(parseInt(m[3], 10) * INV99)\n        this.A = 1\n        this.hsl2rgb()\n        return true\n    }\n}\n\nconst INV6 = 1 / 6\nconst INV15 = 1 / 15\nconst INV99 = 1 / 99\nconst INV255 = 1 / 255\nconst INV359 = 1 / 359\n\nconst RX_RGB = /^RGB[\\s(]+([0-9]+)[^0-9]+([0-9]+)[^0-9]+([0-9]+)/\nconst RX_RGBA = /^RGBA[\\s(]+([0-9]+)[^0-9]+([0-9]+)[^0-9]+([0-9]+)[^0-9.]+([0-9.]+)/\nconst RX_HSL = /^HSL[\\s(]+([0-9]+)[^0-9]+([0-9]+)[^0-9]+([0-9]+)/\n\nfunction clamp01(value: number): number {\n    if (value < 0) { return 0 }\n    if (value > 1) { return 1 }\n    return value\n}\n\nfunction hexa2(value: number) {\n    let out = Math.floor(value).toString(16)\n    if (out.length < 2) { out = \"0\" + out }\n    return out\n}\n","/**\n * Clear the screen by filling it with a plain color.\n * This color is defined by attributes red, gree, blue and alpha, which must be between 0 and 1.\n */\nimport Color from \"../webgl/color\"\nimport Painter, { IPainterParams } from \"./painter\"\n\ninterface IClearPainterParams extends IPainterParams {\n    color?: string\n}\n\nexport default class ClearPainter extends Painter {\n    private _red = 0.8\n    private _green = 0.4\n    private _blue = 0.2\n    private _alpha = 1\n\n    constructor(params: IClearPainterParams) {\n        super(params)\n        this.color = params.color || \"#d72\"\n    }\n\n    get red() { return this._red }\n    set red(v: number) { this._red = v }\n\n    get green() { return this._green }\n    set green(v: number) { this._green = v }\n\n    get blue() { return this._blue }\n    set blue(v: number) { this._blue = v }\n\n    get alpha() { return this._alpha }\n    set alpha(v: number) { this._alpha = v }\n\n    get color() {\n        const color = new Color()\n        color.R = this._red\n        color.G = this._green\n        color.B = this._blue\n        color.A = this._alpha\n        return color.stringify()\n    }\n    set color(cssColor: string) {\n        const color = new Color(cssColor)\n        this._red = color.R\n        this._green = color.G\n        this._blue = color.B\n        this._alpha = color.A\n    }\n\n    public render() {\n        const gl = this.scene.gl\n        gl.clearColor(this._red, this._green, this._blue, this._alpha)\n        gl.clear(gl.COLOR_BUFFER_BIT)\n    }\n}\n","import Calc from '../../calc'\n\nexport interface ISprite {\n    x: number,\n    y: number,\n    z: number,\n    width: number,\n    height: number,\n    originX: number,\n    originY: number,\n    u0: number,\n    v0: number,\n    u1: number,\n    v1: number,\n    scale: number,\n    angle: number\n}\n\nexport default class Sprite {\n\n    get x() { return this.params.x }\n    get y() { return this.params.y }\n    get z() { return this.params.z }\n    get width() { return this.params.width }\n    get height() { return this.params.height }\n    get originX() { return this.params.originX }\n    get originY() { return this.params.originY }\n    get u0() { return this.params.u0 }\n    get v0() { return this.params.v0 }\n    get u1() { return this.params.u1 }\n    get v1() { return this.params.v1 }\n\n    public readonly extra: {[key: string]: any} = {}\n    public $index: number = 0\n    private params: ISprite\n\n    constructor(index: number, private getData: () => Float32Array, params: Partial<ISprite>) {\n        this.$index = index\n        const width = params.width || 50\n        const height = params.height || 50\n        this.params = {\n            x: 0, y: 0, z: 0,\n            width, height,\n            originX: width / 2,\n            originY: height / 2,\n            u0: 0, v0: 0, u1: 1, v1: 1,\n            scale: 1,\n            angle: 0,\n            ...params,\n        }\n        this.update(this.params)\n    }\n\n    public update(newParams: Partial<ISprite>) {\n        this.params = { ...this.params, ...newParams }\n\n        const { getData, $index, params } = this\n        const data = getData()\n        const { x, y, z, originX, originY, width, height, u0, v0, u1, v1, scale, angle } = params\n        const xxA = -originX\n        const yyA = -originY\n        const xxB = xxA + width\n        const yyB = yyA\n        const xxC = xxA + width\n        const yyC = yyA + height\n        const xxD = xxA\n        const yyD = yyA + height\n\n        let xA = xxA * scale\n        let yA = yyA * scale\n        let xB = xxB * scale\n        let yB = yyB * scale\n        let xC = xxC * scale\n        let yC = yyC * scale\n        let xD = xxD * scale\n        let yD = yyD * scale\n\n        if ((angle|0) !== 0) {\n            const C = Calc.cos(angle)\n            const S = Calc.sin(angle)\n\n            xA = (xxA * C + yyA * S) * scale\n            yA = (yyA * C - xxA * S) * scale\n            xB = (xxB * C + yyB * S) * scale\n            yB = (yyB * C - xxB * S) * scale\n            xC = (xxC * C + yyC * S) * scale\n            yC = (yyC * C - xxC * S) * scale\n            xD = (xxD * C + yyD * S) * scale\n            yD = (yyD * C - xxD * S) * scale\n        }\n\n        data[$index + 0] = xA + x\n        data[$index + 1] = yA + y\n        data[$index + 2] = z\n        data[$index + 3] = u0\n        data[$index + 4] = v0\n\n        data[$index + 5] = xB + x\n        data[$index + 6] = yB + y\n        data[$index + 7] = z\n        data[$index + 8] = u1\n        data[$index + 9] = v0\n\n        data[$index + 10] = xC + x\n        data[$index + 11] = yC + y\n        data[$index + 12] = z\n        data[$index + 13] = u1\n        data[$index + 14] = v1\n\n        data[$index + 15] = xD + x\n        data[$index + 16] = yD + y\n        data[$index + 17] = z\n        data[$index + 18] = u0\n        data[$index + 19] = v1\n    }\n}\n","export default \"precision mediump float;\\nuniform sampler2D uniTexture;\\nvarying vec2 varUV;\\n\\nvoid main() {\\n  vec4 color = texture2D( uniTexture, varUV );\\n  if (color.a < 1.0) discard;\\n  gl_FragColor = color;\\n}\\n\"","export default \"uniform float uniWidth;\\nuniform float uniHeight;\\nattribute vec3 attXYZ;\\nattribute vec2 attUV;\\nvarying vec2 varUV;\\n\\nconst float RESOLUTION = 512.0;\\nconst float INV_RESOLUTION = 1.0 / RESOLUTION;\\n\\nvoid main() {\\n  varUV = attUV;\\n  float widestSide = max(uniWidth, uniHeight);\\n  float w = widestSide / uniWidth;\\n  float h = widestSide / uniHeight;\\n  float x = w * (attXYZ.x - RESOLUTION) * INV_RESOLUTION;\\n  float y = h * (attXYZ.y - RESOLUTION) * INV_RESOLUTION;\\n\\n  gl_Position = vec4(x, -y, attXYZ.z, 1.0);\\n}\\n\"","/**\n *\n */\nimport Atlas from \"../../atlas\"\nimport Scene from \"../../scene\"\nimport Program from \"../../webgl/program\"\nimport Painter, { IPainterParams } from \"../painter\"\nimport Sprite, { ISprite } from \"./sprite\"\nimport frag from \"./sprites.frag\"\nimport vert from \"./sprites.vert\"\n\n// Allocations will be done by pieces of BLOCK Sprites.\nconst BLOCK = 64\nconst NB_ATTRIBS = 6  // attXYZ and attUV and attAngle.\nconst NB_CORNERS = 4\nconst CHUNK = NB_ATTRIBS * NB_CORNERS\n\ninterface ISpritesPainterParams extends IPainterParams {\n    atlas: string\n}\n\nexport default class SpritesPainter extends Painter {\n    private readonly atlas: Atlas\n    private readonly prg: Program\n    private dataVert = new Float32Array(BLOCK * CHUNK)\n    private readonly buffVert: WebGLBuffer\n    private readonly buffElem: WebGLBuffer\n    private sprites: Sprite[] = []\n    private count = 0\n    private capacity = BLOCK\n\n    constructor(params: ISpritesPainterParams) {\n        super(params)\n        const { scene, atlas } = params\n        const atlasObj = scene.getAtlas(atlas)\n        if (!atlasObj) {\n            throw this.fatal(`Atlas \"${atlas}\" not found!`)\n        }\n\n        this.atlas = atlasObj\n        this.prg = this.createProgram({ vert, frag })\n        const { gl } = scene\n\n        const buffVert = gl.createBuffer()\n        if (!buffVert) {\n            throw this.fatal(\"Not enough memory to create an array buffer!\")\n        }\n        gl.bindBuffer( gl.ARRAY_BUFFER, buffVert )\n        gl.bufferData( gl.ARRAY_BUFFER, this.dataVert, gl.DYNAMIC_DRAW )\n        this.buffVert = buffVert\n\n        const buffElem = gl.createBuffer()\n        if (!buffElem) {\n            throw this.fatal(\"Not enough memory to create an array buffer!\")\n        }\n        gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, buffElem )\n        gl.bufferData(\n            gl.ELEMENT_ARRAY_BUFFER,\n            createElements(BLOCK),\n            gl.DYNAMIC_DRAW )\n        this.buffElem = buffElem\n    }\n\n    public createSprite(params: Partial<ISprite>): Sprite {\n        const index = this.count * CHUNK\n        this.count++\n        if (this.count >= this.capacity) {\n            // Allocate a new block.\n            this.allocateNewBlock()\n        }\n\n        const { width, height } = this.atlas\n        const sprite = new Sprite(index, this.getData, {\n            width,\n            height,\n            ...params,\n        })\n        this.sprites.push(sprite)\n        return sprite\n    }\n\n    /**\n     * Remove a sprite from the list of sprites to render.\n     */\n    public removeSprite(sprite: Sprite) {\n        if (sprite.$index < 0) return\n        const { sprites } = this\n        if (sprites.length === 0) {\n            sprite.$index = -1\n            return\n        }\n        if (sprites.length === 1) {\n            sprite.$index = -1\n            sprites.splice(0, sprites.length)\n            this.count = 0\n            return\n        }\n        const lastSprite = sprites.pop()\n        if (!lastSprite) return\n        lastSprite.$index = sprite.$index\n        lastSprite.update({})\n        this.count--\n        sprite.$index = -1\n    }\n\n    public render() {\n        const { scene, prg, atlas, buffVert, buffElem } = this\n        const gl = scene.gl\n\n        // Update sprites' attributes.\n        gl.bindBuffer( gl.ARRAY_BUFFER, buffVert )\n        gl.bufferData( gl.ARRAY_BUFFER, this.dataVert, gl.DYNAMIC_DRAW )\n\n        gl.enable(gl.DEPTH_TEST)\n        prg.use()\n        atlas.activate()\n        const uniforms = prg as {[key: string]: any}\n        uniforms.$uniTexture = 0\n        uniforms.$uniWidth = scene.width\n        uniforms.$uniHeight = scene.height\n        prg.bindAttribs(buffVert, \"attXYZ\", \"attUV\")\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffVert)\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffElem)\n        gl.drawElements(gl.TRIANGLES, 6 * this.count, gl.UNSIGNED_SHORT, 0)\n    }\n\n    private allocateNewBlock() {\n        this.capacity += BLOCK\n\n        const { scene } = this\n        const { gl } = scene\n\n        const buffElem = this.buffElem\n        gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, buffElem )\n        gl.bufferData(\n            gl.ELEMENT_ARRAY_BUFFER,\n            createElements(this.capacity),\n            gl.DYNAMIC_DRAW )\n\n        const dataVert = new Float32Array(this.capacity * CHUNK)\n        dataVert.set(this.dataVert)\n        this.dataVert = dataVert\n    }\n\n    /**\n     * Since the vertex array can be reallocated, we cannot give a reference to the Float32Array\n     * to any Sprite. Instead, we will give them this function that will return the current array.\n     */\n    private getData = () => this.dataVert\n}\n\n/**\n * A--B\n * |  |\n * D--C\n */\nfunction createElements(capacity: number) {\n    const dataElem = new Uint16Array(6 * capacity)\n    let i = 0\n    let a = 0\n    for (let k = 0 ; k < capacity ; k++) {\n        const b = a + 1\n        const c = a + 2\n        const d = a + 3\n        dataElem[i + 0] = a\n        dataElem[i + 1] = d\n        dataElem[i + 2] = b\n        dataElem[i + 3] = b\n        dataElem[i + 4] = d\n        dataElem[i + 5] = c\n        a += 4\n        i += 6\n    }\n    return dataElem\n}\n","import Background from \"./background\"\nimport Clear from \"./clear\"\nimport Painter from \"./painter\"\nimport Sprites from \"./sprites\"\n\nexport default {\n    Background,\n    Clear,\n    Painter,\n    Sprites,\n}\n","export interface IAtlasParams {\n    name: string,\n    // URL of an image JPG, PNG, GIF or WEBP.\n    image: string\n}\n\nexport default class Atlas {\n    private readonly texture: WebGLTexture\n    private _ready = false\n    private _width = 0\n    private _height = 0\n\n    constructor(private gl: WebGLRenderingContext, private _name: string) {\n        const texture = gl.createTexture()\n        if (!texture) { throw new Error(\"Unable to create a new texture!\") }\n        this.texture = texture\n        gl.bindTexture(gl.TEXTURE_2D, texture)\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR)\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR)\n    }\n\n    get name() { return this._name }\n    get width() { return this._width }\n    get height() { return this._height }\n    /**\n     * Return `true` as soon as an image has been loaded into the graphic card.\n     */\n    get ready() { return this._ready }\n\n    /**\n     * Remove the texture from the graphic card memory.\n     */\n    public destroy() {\n        this._ready = false\n        const { gl, texture } = this\n        gl.deleteTexture(texture)\n    }\n\n    public activate(unit = 0) {\n        const { gl, texture } = this\n        const UNITS = [\n            gl.TEXTURE0,\n            gl.TEXTURE1,\n            gl.TEXTURE2,\n            gl.TEXTURE3,\n            gl.TEXTURE4,\n            gl.TEXTURE5,\n            gl.TEXTURE6,\n            gl.TEXTURE7,\n        ]\n        gl.activeTexture(UNITS[Math.abs(unit) % UNITS.length])\n        gl.bindTexture(gl.TEXTURE_2D, texture)\n    }\n\n    public async load(params: IAtlasParams) {\n        this._ready = false\n        return this.loadImage(params.image)\n    }\n\n    private async loadImage(url: string): Promise<void> {\n        const that = this\n\n        return new Promise((resolve, reject) => {\n            const img = new Image()\n            that._ready = false\n            img.onload = () => {\n                const { gl, texture } = that\n                gl.bindTexture(gl.TEXTURE_2D, texture)\n                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img)\n                that._ready = true\n                that._width = img.width\n                that._height = img.height\n                resolve()\n            }\n            img.onerror = () => {\n                console.error(`Unable to load image \"${name}\": `, url)\n                reject()\n            }\n            img.src = url\n        })\n    }\n}\n","/**\r\n * Resolution in CSS pixels. If omitted, the real resolution\r\n * of the device is taken. On smartphones, for instance,\r\n * the resolution is often greater than 1.\r\n *\r\n * Return `true` if the size has changed.\r\n */\r\nexport default ( gl: WebGLRenderingContext, resolution: number = 0 ) => {\r\n    if (resolution <= 0) {\r\n        resolution = window.devicePixelRatio\r\n    }\r\n\r\n    const canvas = gl.canvas as HTMLCanvasElement\r\n    const displayWidth = Math.floor( canvas.clientWidth * resolution )\r\n    const displayHeight = Math.floor( canvas.clientHeight * resolution )\r\n\r\n    // Check if the canvas is not the same size.\r\n    if ( canvas.width !== displayWidth ||\r\n        canvas.height !== displayHeight ) {\r\n\r\n        // Make the canvas the same size\r\n        canvas.width = displayWidth\r\n        canvas.height = displayHeight\r\n        gl.viewport( 0, 0, displayWidth, displayHeight )\r\n        return true\r\n    }\r\n    return false\r\n}\r\n","export default class Pointer {\n    private _x = 0\n    private _y = 0\n    private _down = false\n    // If 0, pointer is up.\n    private _downTime = 0\n    private _eventDown = false\n    private _eventUp = false\n\n    /** @hidden */\n    constructor(private canvas: HTMLCanvasElement) {\n        window.addEventListener(\"mousemove\", this.onMouseMove, true)\n        window.addEventListener(\"touchmove\", this.onTouchMove, true)\n        window.addEventListener(\"mousedown\", this.onMouseDown, true)\n        window.addEventListener(\"touchstart\", this.onTouchStart, true)\n        window.addEventListener(\"mouseup\", this.onMouseUp, true)\n        window.addEventListener(\"touchend\", this.onTouchEnd, true)\n    }\n\n    /** @hidden */\n    public reset() {\n        this._eventDown = false\n        this._eventUp = false\n    }\n\n    get x() { return this._x }\n    get y() { return this._y }\n\n    /** Test if the pointer is touching the screen. */\n    get down() { return this._down }\n    /** `true` only if the pointer started touching the screen this very last frame. */\n    get eventUp() { return this._eventUp }\n    /** `true` only if the pointer stopped touching the screen this very last frame. */\n    get eventDown() { return this._eventDown }\n\n    private onMouseMove = (evt: MouseEvent) => {\n        this.computeCoords(evt.clientX, evt.clientY)\n    }\n\n    private onTouchMove = (te: TouchEvent) => {\n        const evt = te.touches[0]\n        this.computeCoords(evt.clientX, evt.clientY)\n    }\n\n    private onMouseDown = (evt: MouseEvent) => {\n        this.onDown(evt.clientX, evt.clientY)\n    }\n\n    private onTouchStart = (te: TouchEvent) => {\n        const evt = te.touches[0]\n        this.onDown(evt.clientX, evt.clientY)\n    }\n\n    private onDown(x: number, y: number) {\n        if (this._downTime !== 0) return\n        this.computeCoords(x, y)\n        this._down = true\n        this._eventDown = true\n        this._downTime = Date.now()\n    }\n\n    private onMouseUp = (evt: MouseEvent) => {\n        this.onUp(evt.clientX, evt.clientY)\n    }\n\n    private onTouchEnd = (te: TouchEvent) => {\n        const evt = te.touches[0]\n        this.onUp(evt.clientX, evt.clientY)\n    }\n\n    private onUp(x: number, y: number) {\n        if (this._downTime === 0) return\n        this.computeCoords(x, y)\n        this._down = false\n        this._eventUp = true\n        this._downTime = 0\n    }\n\n    private computeCoords(pointerX: number, pointerY: number) {\n        const { canvas } = this\n        const rect = canvas.getBoundingClientRect()\n\n        const x = pointerX - rect.left\n        const y = pointerY - rect.top\n        const w = rect.width\n        const h = rect.height\n\n        if (w > h) {\n            this._x = 1024 * x / w\n            this._y = 1024 * (0.5 * (1 - h / w) + (y / w))\n        } else {\n            this._x = 1024 * (0.5 * (1 - w / h) + (x / h))\n            this._y = 1024 * y / h\n        }\n    }\n}\n","import Atlas, { IAtlasParams } from \"./atlas\"\nimport Painter from \"./painter/painter\"\nimport Resize from \"./webgl/resize\"\nimport Pointer from './pointer'\n\ninterface IVector2 {\n    x: number, y: number\n}\n\nexport default class FlatLand {\n    private readonly _gl: WebGLRenderingContext\n    private readonly _pointer: Pointer\n    public resolution = 1\n    public onAnimation: ((time: number) => void) | null = null\n    private readonly painters: Map<string, Painter>\n    private readonly atlases: Map<string, Atlas>\n    private activePainters: Painter[] = []\n    private isRendering = false\n    private _pointerX = -1024\n    private _pointerY = -1024\n    private _pointerTap = false\n    // When 0\n    private _pointerDownTime = 0\n\n    constructor(canvas: HTMLCanvasElement) {\n        this._pointer = new Pointer(canvas)\n        const gl = canvas.getContext(\"webgl\", {\n            // Specify WebGL options.\n        })\n        if (!gl) { throw new Error(\"Unable to create a WegGL context!\") }\n\n        this._gl = gl\n        this.atlases = new Map()\n        this.painters = new Map()\n    }\n\n    get gl(): WebGLRenderingContext {\n        return this._gl\n    }\n\n    /**\n     * Retreive information about pointer (mouse, pen, finger, ...) state.\n     */\n    get pointer() { return this._pointer }\n\n    /**\n     * Visible width. Between 0 and 1024.\n     */\n    get width(): number {\n        return this.gl.drawingBufferWidth\n    }\n    /**\n     * Visible height. Between 0 and 1024.\n     */\n    get height(): number {\n        return this.gl.drawingBufferHeight\n    }\n\n    /**\n     * Last X position of the pointer between 0 and 1024.\n     */\n    get pointerX(): number {\n        return this._pointerX\n    }\n\n    /**\n     * Last Y position of the pointer between 0 and 1024.\n     */\n    get pointerY(): number {\n        return this._pointerY\n    }\n\n    get pointerTap(): boolean {\n        return this._pointerTap\n    }\n\n    /**\n     * Define which painter to use and in what order.\n     * For better performance, prefer putting background painters at the end of the list.\n     */\n    public use(painters: Painter[]) {\n        this.activePainters = painters.slice()\n    }\n\n    public getAtlas(name: string): Atlas | null {\n        const { atlases } = this\n        return atlases.get(name) || null\n    }\n\n    public async createAtlas(params: IAtlasParams): Promise<Atlas> {\n        const { name } = params\n        const atlas = new Atlas(this.gl, name)\n        this.atlases.set(name, atlas)\n        await atlas.load(params)\n        return atlas\n    }\n\n    public destroyAtlas(name: string): boolean {\n        const { atlases } = this\n        const atlas = atlases.get(name)\n        if (!atlas) { return false }\n        atlases.delete(name)\n        atlas.destroy()\n        return true\n    }\n\n    /**\n     * @hidden\n     * If a painter with the same name already exists, return false and don't add the new one.\n     */\n    public $attachPainter(painter: Painter): boolean {\n        if (this.painters.has(painter.name)) { return false }\n        this.painters.set(painter.name, painter)\n        this.activePainters = this.activePainters\n            .filter( (p: Painter) => p.name)\n        this.activePainters.push(painter)\n        return true\n    }\n\n    /**\n     * @hidden\n     */\n    public $detachPainter(name: string): boolean {\n        if (this.painters.has(name)) { return false }\n        this.painters.delete(name)\n        this.activePainters = this.activePainters\n            .filter( (p: Painter) => p.name)\n        return true\n    }\n\n    /**\n     * Start rendering.\n     * When a frame is rendered, the function `onAnimation( time: number )` is called.\n     */\n    public start() {\n        if (this.isRendering) { return }\n        this.isRendering = true\n        window.requestAnimationFrame(this.render)\n    }\n\n    /**\n     * Stop rendering.\n     */\n    public stop() {\n        this.isRendering = false\n    }\n\n    private render = (time: number) => {\n        if (this.isRendering) { window.requestAnimationFrame(this.render) } else { return }\n\n        const { gl } = this\n        Resize(gl, this.resolution)\n\n        gl.clearDepth(-1)\n        gl.clear(gl.DEPTH_BUFFER_BIT)\n        gl.depthFunc(gl.GEQUAL)\n\n        try {\n            for (const painter of this.activePainters) {\n                painter.render(time)\n            }\n\n            const { onAnimation } = this\n            if (typeof onAnimation === \"function\") {\n                onAnimation(time)\n                \n                this.pointer.reset()\n            }\n        } catch (ex) {\n            console.error(ex)\n            this.stop()\n            console.error(\"###############################\")\n            console.error(\"# Rendering has been stopped! #\")\n            console.error(\"###############################\")\n        }\n    }\n}\n","import Calc from \"./calc\"\nimport Painter from \"./painter\"\nimport Scene from \"./scene\"\n\nconst FlatLand = {\n    Calc,\n    Painter,\n    Scene\n}\n\nexport default FlatLand\n\n// Global export for old vanilla Javascript users.\nwindow[\"FlatLand\"] = FlatLand\n"],"sourceRoot":""}