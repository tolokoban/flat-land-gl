{"code":"import Atlas from './atlas';\r\nimport Pointer from './pointer';\r\nimport Resize from './webgl/resize';\r\nlet ID = 1;\r\nexport default class Scene {\r\n    constructor(canvas) {\r\n        this.resolution = 1;\r\n        this.onAnimation = null;\r\n        this.activePainters = [];\r\n        this.isRendering = false;\r\n        this._pointerTap = false;\r\n        this.render = (time) => {\r\n            if (this.isRendering) {\r\n                window.requestAnimationFrame(this.render);\r\n            }\r\n            else {\r\n                return;\r\n            }\r\n            const { gl } = this;\r\n            Resize(gl, this.resolution);\r\n            gl.clearDepth(-1);\r\n            gl.clear(gl.DEPTH_BUFFER_BIT);\r\n            gl.depthFunc(gl.GEQUAL);\r\n            try {\r\n                for (const painter of this.activePainters) {\r\n                    painter.render(time);\r\n                }\r\n                const { onAnimation } = this;\r\n                if (typeof onAnimation === 'function') {\r\n                    onAnimation(time);\r\n                    this.pointer.reset();\r\n                }\r\n            }\r\n            catch (ex) {\r\n                console.error(ex);\r\n                this.stop();\r\n                console.error('###############################');\r\n                console.error('# Rendering has been stopped! #');\r\n                console.error('###############################');\r\n            }\r\n        };\r\n        this._pointer = new Pointer(canvas);\r\n        const gl = canvas.getContext('webgl', {\r\n        // Specify WebGL options.\r\n        });\r\n        if (!gl) {\r\n            throw new Error('Unable to create a WegGL context!');\r\n        }\r\n        this._gl = gl;\r\n        this.atlases = new Map();\r\n    }\r\n    get gl() {\r\n        return this._gl;\r\n    }\r\n    /**\r\n     * Retreive information about pointer (mouse, pen, finger, ...) state.\r\n     */\r\n    get pointer() {\r\n        return this._pointer;\r\n    }\r\n    /**\r\n     * Visible width. Between 0 and 1024.\r\n     */\r\n    get width() {\r\n        return this.gl.drawingBufferWidth;\r\n    }\r\n    /**\r\n     * Visible height. Between 0 and 1024.\r\n     */\r\n    get height() {\r\n        return this.gl.drawingBufferHeight;\r\n    }\r\n    get pointerTap() {\r\n        return this._pointerTap;\r\n    }\r\n    /**\r\n     * Define which painter to use and in what order.\r\n     * For better performance, prefer putting background painters at the end of the list.\r\n     */\r\n    use(painters) {\r\n        for (const painter of painters) {\r\n            painter.scene = this;\r\n        }\r\n        this.activePainters = painters.slice();\r\n    }\r\n    getAtlas(name) {\r\n        const { atlases } = this;\r\n        return atlases.get(name) || null;\r\n    }\r\n    /**\r\n     * Create an atlas that can be used immediatly even if the needed assets are not yet loaded.\r\n     * @param  params\r\n     * @param  onLoad You can provide a callback function that will be called when the assets\r\n     * are loaded.\r\n     */\r\n    createAtlas(params, onLoad) {\r\n        const { name } = params;\r\n        const sanitizedName = name || this.getNewName();\r\n        const atlas = new Atlas(this.gl, sanitizedName);\r\n        this.atlases.set(sanitizedName, atlas);\r\n        // tslint:disable:no-floating-promises\r\n        atlas.load(params).then(() => {\r\n            if (typeof onLoad === 'function') {\r\n                onLoad(params);\r\n            }\r\n        });\r\n        return atlas;\r\n    }\r\n    destroyAtlas(name) {\r\n        const { atlases } = this;\r\n        const atlas = atlases.get(name);\r\n        if (!atlas) {\r\n            return false;\r\n        }\r\n        atlases.delete(name);\r\n        atlas.destroy();\r\n        return true;\r\n    }\r\n    /**\r\n     * Start rendering.\r\n     * When a frame is rendered, the function `onAnimation( time: number )` is called.\r\n     */\r\n    start() {\r\n        if (this.isRendering) {\r\n            return;\r\n        }\r\n        this.isRendering = true;\r\n        window.requestAnimationFrame(this.render);\r\n    }\r\n    /**\r\n     * Stop rendering.\r\n     */\r\n    stop() {\r\n        this.isRendering = false;\r\n    }\r\n    getNewName() {\r\n        while (true) {\r\n            const name = `atlas-${ID++}`;\r\n            if (!this.atlases.has(name))\r\n                return name;\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=scene.js.map","references":["/home/petitjea/Code/github/flat-land-gl/src/atlas.ts","/home/petitjea/Code/github/flat-land-gl/src/painter/painter.ts","/home/petitjea/Code/github/flat-land-gl/src/pointer.ts","/home/petitjea/Code/github/flat-land-gl/src/webgl/resize.ts"],"map":"{\"version\":3,\"file\":\"scene.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/scene.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/petitjea/Code/github/flat-land-gl/src/scene.d.ts","writeByteOrderMark":false,"text":"import Atlas, { IAtlasParams } from './atlas';\r\nimport Painter from './painter/painter';\r\nimport Pointer from './pointer';\r\nexport default class Scene {\r\n    get gl(): WebGLRenderingContext;\r\n    /**\r\n     * Retreive information about pointer (mouse, pen, finger, ...) state.\r\n     */\r\n    get pointer(): Pointer;\r\n    /**\r\n     * Visible width. Between 0 and 1024.\r\n     */\r\n    get width(): number;\r\n    /**\r\n     * Visible height. Between 0 and 1024.\r\n     */\r\n    get height(): number;\r\n    get pointerTap(): boolean;\r\n    resolution: number;\r\n    onAnimation: ((time: number) => void) | null;\r\n    private readonly _gl;\r\n    private readonly _pointer;\r\n    private readonly atlases;\r\n    private activePainters;\r\n    private isRendering;\r\n    private _pointerTap;\r\n    constructor(canvas: HTMLCanvasElement);\r\n    /**\r\n     * Define which painter to use and in what order.\r\n     * For better performance, prefer putting background painters at the end of the list.\r\n     */\r\n    use(painters: Painter[]): void;\r\n    getAtlas(name: string): Atlas | null;\r\n    /**\r\n     * Create an atlas that can be used immediatly even if the needed assets are not yet loaded.\r\n     * @param  params\r\n     * @param  onLoad You can provide a callback function that will be called when the assets\r\n     * are loaded.\r\n     */\r\n    createAtlas(params: IAtlasParams, onLoad?: (params: IAtlasParams) => void): Atlas;\r\n    destroyAtlas(name: string): boolean;\r\n    /**\r\n     * Start rendering.\r\n     * When a frame is rendered, the function `onAnimation( time: number )` is called.\r\n     */\r\n    start(): void;\r\n    /**\r\n     * Stop rendering.\r\n     */\r\n    stop(): void;\r\n    private getNewName;\r\n    private render;\r\n}\r\n"}}
