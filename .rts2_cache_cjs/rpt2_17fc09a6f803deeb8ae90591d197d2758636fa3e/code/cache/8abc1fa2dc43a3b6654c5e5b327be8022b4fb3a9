{"code":"/**\r\n * Background the screen by filling it with an image that covers it entirely.\r\n */\r\nimport castString from '../../converter/string';\r\nimport Painter from '../painter';\r\nconst NB_VERTICES_IN_SQUARE = 4;\r\nexport default class BackgroundPainter extends Painter {\r\n    /**\r\n     * params: { atlas, align }\r\n     * - align: if undefined, the background will be centered.\r\n     *          \"R\" means that the Right edge of the background is always visible.\r\n     *          \"L\" means the same for Left.\r\n     *          \"T\" for Top.\r\n     *          \"B\" for \"Bottom\".\r\n     */\r\n    constructor(params) {\r\n        super();\r\n        this.params = params;\r\n    }\r\n    render() {\r\n        const { scene, prg, atlas, buff } = this;\r\n        if (!scene || !prg || !atlas || !buff)\r\n            return;\r\n        const gl = scene.gl;\r\n        gl.enable(gl.DEPTH_TEST);\r\n        prg.use();\r\n        atlas.activate();\r\n        const uniforms = prg;\r\n        uniforms.$uniTexture = 0;\r\n        prg.setUniform('uniAspectRatio', scene.width / scene.height);\r\n        prg.bindAttribs(buff, 'attXY');\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, buff);\r\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, NB_VERTICES_IN_SQUARE);\r\n    }\r\n    destroy(scene) {\r\n        const { gl } = scene;\r\n        const { buff } = this;\r\n        if (!buff)\r\n            return;\r\n        gl.deleteBuffer(buff);\r\n    }\r\n    initialize(scene) {\r\n        const { params } = this;\r\n        const { atlas } = params;\r\n        this.atlas = atlas;\r\n        this.prg = this.createProgram({\r\n            frag: FRAG,\r\n            vert: getVert(castString(params.align).toUpperCase()),\r\n        });\r\n        const { gl } = scene;\r\n        const buff = gl.createBuffer();\r\n        if (!buff) {\r\n            throw this.fatal('Not enough memory to create an array buffer!');\r\n        }\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, buff);\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]), gl.STATIC_DRAW);\r\n        this.buff = buff;\r\n    }\r\n}\r\nfunction getVert(align) {\r\n    let x = '';\r\n    let y = '';\r\n    if (align.indexOf('B') !== -1) {\r\n        y = 'location.y -= uniAspectRatio - 1.0;';\r\n    }\r\n    else if (align.indexOf('T') !== -1) {\r\n        y = 'location.y += uniAspectRatio - 1.0;';\r\n    }\r\n    if (align.indexOf('R') !== -1) {\r\n        x = 'location.x -= 1.0 / uniAspectRatio - 1.0;';\r\n    }\r\n    else if (align.indexOf('L') !== -1) {\r\n        x = 'location.x += 1.0 / uniAspectRatio - 1.0;';\r\n    }\r\n    return `uniform float uniAspectRatio;\nattribute vec2 attXY;\nvarying vec2 varUV;\n\nvoid main() {\n  varUV = attXY;\n  vec2 location = 2.0 * (attXY - vec2(0.5, 0.5));\n\n  if (uniAspectRatio > 1.0) {\n    location.y *= uniAspectRatio;${y}\n  } else {\n    location.x /= uniAspectRatio;${x}\n  }\n\n  gl_Position = vec4(location.x, -location.y, -1.0, 1.0);\n}`;\r\n}\r\nconst FRAG = `precision mediump float;\nuniform sampler2D uniTexture;\nvarying vec2 varUV;\n\nvoid main() {\n  vec4 color = texture2D( uniTexture, varUV );\n  gl_FragColor = color;\n}`;\r\n//# sourceMappingURL=background.js.map","references":["/home/petitjea/Code/github/flat-land-gl/src/atlas.ts","/home/petitjea/Code/github/flat-land-gl/src/converter/string.ts","/home/petitjea/Code/github/flat-land-gl/src/scene.ts","/home/petitjea/Code/github/flat-land-gl/src/webgl/program.ts","/home/petitjea/Code/github/flat-land-gl/src/painter/painter.ts","/home/petitjea/Code/github/flat-land-gl/src/types.ts"],"map":"{\"version\":3,\"file\":\"background.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/painter/background/background.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/petitjea/Code/github/flat-land-gl/src/painter/background/background.d.ts","writeByteOrderMark":false,"text":"/**\r\n * Background the screen by filling it with an image that covers it entirely.\r\n */\r\nimport Atlas from '../../atlas';\r\nimport Scene from '../../scene';\r\nimport Painter from '../painter';\r\ninterface IBackgroundPainterParams {\r\n    atlas: Atlas;\r\n    align?: string;\r\n}\r\nexport default class BackgroundPainter extends Painter {\r\n    private params;\r\n    private atlas?;\r\n    private prg?;\r\n    private buff?;\r\n    /**\r\n     * params: { atlas, align }\r\n     * - align: if undefined, the background will be centered.\r\n     *          \"R\" means that the Right edge of the background is always visible.\r\n     *          \"L\" means the same for Left.\r\n     *          \"T\" for Top.\r\n     *          \"B\" for \"Bottom\".\r\n     */\r\n    constructor(params: IBackgroundPainterParams);\r\n    render(): void;\r\n    protected destroy(scene: Scene): void;\r\n    protected initialize(scene: Scene): void;\r\n}\r\nexport {};\r\n"}}
