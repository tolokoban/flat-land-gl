{"code":"export default class Atlas {\r\n    constructor(gl, _name) {\r\n        this.gl = gl;\r\n        this._name = _name;\r\n        this._ready = false;\r\n        this._width = 0;\r\n        this._height = 0;\r\n        const texture = gl.createTexture();\r\n        if (!texture) {\r\n            throw new Error('Unable to create a new texture!');\r\n        }\r\n        this.texture = texture;\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n    }\r\n    get name() {\r\n        return this._name;\r\n    }\r\n    get width() {\r\n        return this._width;\r\n    }\r\n    get height() {\r\n        return this._height;\r\n    }\r\n    /**\r\n     * Return `true` as soon as an image has been loaded into the graphic card.\r\n     */\r\n    get ready() {\r\n        return this._ready;\r\n    }\r\n    /**\r\n     * Remove the texture from the graphic card memory.\r\n     */\r\n    destroy() {\r\n        this._ready = false;\r\n        const { gl, texture } = this;\r\n        gl.deleteTexture(texture);\r\n    }\r\n    activate(unit = 0) {\r\n        const { gl, texture } = this;\r\n        const UNITS = [\r\n            gl.TEXTURE0,\r\n            gl.TEXTURE1,\r\n            gl.TEXTURE2,\r\n            gl.TEXTURE3,\r\n            gl.TEXTURE4,\r\n            gl.TEXTURE5,\r\n            gl.TEXTURE6,\r\n            gl.TEXTURE7,\r\n        ];\r\n        gl.activeTexture(UNITS[Math.abs(unit) % UNITS.length]);\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    }\r\n    async load(params) {\r\n        this._ready = false;\r\n        return this.loadImage(params.image);\r\n    }\r\n    async loadImage(url) {\r\n        const that = this;\r\n        return new Promise((resolve, reject) => {\r\n            const img = new Image();\r\n            that._ready = false;\r\n            img.onload = () => {\r\n                const { gl, texture } = that;\r\n                gl.bindTexture(gl.TEXTURE_2D, texture);\r\n                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);\r\n                that._ready = true;\r\n                that._width = img.width;\r\n                that._height = img.height;\r\n                resolve();\r\n            };\r\n            img.onerror = () => {\r\n                console.error(`Unable to load image \"${name}\": `, url);\r\n                reject();\r\n            };\r\n            img.src = url;\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=atlas.js.map","references":[],"map":"{\"version\":3,\"file\":\"atlas.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/atlas.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/petitjea/Code/github/flat-land-gl/src/atlas.d.ts","writeByteOrderMark":false,"text":"export interface IAtlasParams {\r\n    name?: string;\r\n    image: string;\r\n}\r\nexport default class Atlas {\r\n    private gl;\r\n    private _name;\r\n    private readonly texture;\r\n    private _ready;\r\n    private _width;\r\n    private _height;\r\n    constructor(gl: WebGLRenderingContext, _name: string);\r\n    get name(): string;\r\n    get width(): number;\r\n    get height(): number;\r\n    /**\r\n     * Return `true` as soon as an image has been loaded into the graphic card.\r\n     */\r\n    get ready(): boolean;\r\n    /**\r\n     * Remove the texture from the graphic card memory.\r\n     */\r\n    destroy(): void;\r\n    activate(unit?: number): void;\r\n    load(params: IAtlasParams): Promise<void>;\r\n    private loadImage;\r\n}\r\n"}}
